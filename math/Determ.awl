
`
	+---+---+---+---+---+---+
	|	'Determ.awl':
	|	Determinants calculation.
	|
	|	AWL libraries/tests.
	|	Written by trilirium
	|	Public domain.
	+---+---+---+---+---+---+
`


`
	Show 2D matrix (N*M)
`
! show_matrix (A):[v i j] = {
v = a_dims (A);

for_inc (i, v[0], {
    <: '\t[ ';
    for_inc (j, v[1],
	<: (A {i, j}, ' ')
	);
    <: ']\n'
    });
};


`
	Calculate determinant of N*N array A
`
! determ (N A):[P] = {
` element index permutation `
P = a_create (N);

! det_elem (n):[res i sign] =
    n <> N ? {
	res = 0;
	P {n} = n;
	n ++;
	sign = 1;
	for_dec (i, 1..n, {
		res =+: sign * det_elem (n);
		P {i} :=: P {i-1};
		sign =:-
		});
	res =+: sign * det_elem (n);
	for_inc (i, 1..n, P {i} :=: P {i-1});
	res
	} :

    {	res = 1;
	for_inc (i, N, res =*: A {i, P {i}});
	res
    };


det_elem (0)
};



`
	Initialise matrix; calculate determinant
`
! determ_test (expect N init_list) : [array really] = {
array = a_create ([N N]);

a_load (array, init_list);

<: 'Det (\n';
show_matrix (array);
<: ('    ) = ', (really = determ (N, array)), '\n\n');

if (really <> expect)::
	(<: ("\aError: expected ", expect, "!\n"));
};

<: '\n';

` Actual tests... `

determ_test (0, 3, [1 2 3 4 5 6 7 8 9]);

determ_test (-5, 2, [1 2 3 1]);

determ_test (4, 3, [1 2 3 3 2 (-1) (-1) 0 1]);

determ_test (14, 3, [1 2 3 1 (-1) 1 1 3 (-1)]);

determ_test (33, 3, [1 2 1 3 (-5) 3 2 7 (-1)]);

determ_test (-264,
	4, [(-5) 1 (-4) 1 1 4 (-1) 5 (-4) 1 (-8) (-1) 3 2 6 2]);

determ_test (-264,
	5, [2 0 1 3 1 (-1) 1 2 2 3 1 4 0 (-1) 5 2 1 3 1 2 1 2 (-1) 3 1]);

determ_test (360,
	5, [1 2 3 4 5 2 1 3 4 5 3 2 1 4 5 4 3 2 1 5 5 4 3 2 1]);

determ_test (113522, 6,
	[1 9 2 6 5 3 7 2 8 3 9 4 4 3 0 1 7 9 5 4 7 0 2 1 6 8 1 7 3 2 9 1 6 2 0 5]);

