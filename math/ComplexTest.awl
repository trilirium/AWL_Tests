
`
	+---+---+---+---+---+---+
	|	'ComplexTest.awl':
	|	Testing operations on complex numbers.
	|
	|	AWL libraries/tests.
	|	Written by trilirium
	|	Public domain.
	+---+---+---+---+---+---+
`

include "Complex.awl";

<: "\nImported 'complex.awl'...\n\n";

<: "Class 'complex' (members):\n";
x_vars_ord (1, ! complex);
<: "\n";

<: "Class 'complex' (functors):\n";
x_funcs_ord (1, ! complex);
<: "\n";

` Helper utility:
  Evaluate cplx_val and output it after str_list `
! eval_test (cplx_val str_list) = {
	<: ([=] +$ str_list, ' = ');
	complex !! cplx_val.put ();
	<: '\n'
	};

CA = complex (10, -20);
CB = complex (15, 22);
CC = complex (-5, 35);

eval_test ([CA 'CA']);
eval_test ([CB 'CB']);
eval_test ([CC 'CC']);

complex !! {
eval_test (c_neg (CB), ['-' 'CB']);
eval_test (c_conj (CC), ['~' 'CC']);

eval_test (c_add (CA, CB), ['CA' ' + ' 'CB']);
eval_test (c_sub (CC, CB), ['CC' ' - ' 'CB']);
eval_test (c_mul (CA, CB), ['CA' ' * ' 'CB']);
eval_test (c_div (CC, CA), ['CC' ' / ' 'CA']);
};

<: '\n';

` Test conjugated operations `
<: '\tTESTING: conjugated addition/multiplication ...\n\n';

! conj_addmul_test (nA vA) = complex !! {
	` eval then print A + ~A (expected real) `
	eval_test (c_add(vA, c_conj(vA)), [nA ' + ~' nA]);

	` eval then print A * ~A (expected real) `
	eval_test (c_mul(vA, c_conj(vA)), [nA ' * ~' nA]);

	<: '\n';
    };

conj_addmul_test (['CA' CA]);
conj_addmul_test (['CB' CB]);
conj_addmul_test (['CC' CC]);

<: '\tTESTING: multiplication distributivity ...\n\n';

` Multiplication distributivity test for additive operations `
! mult_distr_test (nA vA nB vB nC vC) = complex !! {
    ` eval then print (A + B) * C `
	eval_test (c_mul (c_add (vA, vB), vC),
		['(' nA ' + ' nB ') * ' nC]);

    ` eval then print (A*C) + (B*C) `
	eval_test (
		c_add (c_mul (vA, vC), c_mul (vB, vC)),
		['(' nA '*' nC ') + (' nB '*' nC ')']);

    ` eval then print (A - B) * C `
	eval_test (c_mul (c_sub (vA, vB), vC),
		['(' nA ' - ' nB ') * ' nC]);

    ` eval then print (A*C) - (B*C) `
	eval_test (
		c_sub (c_mul (vA, vC), c_mul (vB, vC)),
		['(' nA '*' nC ') - (' nB '*' nC ')']);

	<: '\n';
    };

mult_distr_test (['CA' CA 'CB' CB 'CC' CC]);
mult_distr_test (['CB' CB 'CC' CC 'CA' CA]);
mult_distr_test (['CC' CC 'CA' CA 'CB' CB]);

<: '\tTESTING: multiplication associativity ...\n\n';

` Multiplication associativity test `
! mult_assoc_test (nA vA nB vB nC vC) = complex !! {
    ` eval then print (A * B) * C `
    eval_test (c_mul (c_mul (vA, vB), vC),
		['(' nA ' * ' nB ') * ' nC]);

    ` eval then print A * (B * C) `
    eval_test (c_mul (vA, c_mul (vB, vC)),
		[nA ' * (' nB ' * ' nC ')']);

	<: '\n';
    };

mult_assoc_test (['CA' CA 'CB' CB 'CC' CC]);
mult_assoc_test (['CB' CB 'CC' CC 'CA' CA]);
mult_assoc_test (['CC' CC 'CA' CA 'CB' CB]);

<: '\tTESTING: division ...\n\n';

` check division `
! div_test (nA vA nB vB) = complex !! {
	eval_test (
		c_mul (c_div(vB, vA), c_div(vA, vB)),
		['(' nA '/' nB ') * (' nB '/' nA ')']);

	<: '\n';
    };

div_test (['CA' CA 'CB' CB]);
div_test (['CB' CB 'CC' CC]);
div_test (['CC' CC 'CA' CA]);

! div_test1 (nA vA nB vB) = complex !! {
    eval_test (
		c_div (c_div (c_mul (vA, vB), vA), vB),
		['(' nA '*' nB ') / ' nA ' / ' nB]);

	<: '\n';
    };

div_test1 (['CA' CA 'CB' CB]);
div_test1 (['CB' CB 'CC' CC]);
div_test1 (['CC' CC 'CA' CA]);

<: '\tTESTING: square root ...\n\n';

! sqr_test_1 (nA vA):[sqr_A] = complex !! {
	eval_test (vA, nA);

	sqr_A = c_sqr (vA);

	` test equality: sqr(A) * sqr(A) == A `
	eval_test (c_mul (sqr_A, sqr_A), ['(sqr (' nA ') * sqr (' nA ')']);

	<: '\n';
	};

sqr_test_1 (['CA' CA]);
sqr_test_1 (['CB' CB]);
sqr_test_1 (['CC' CC]);

! sqr_test_2 (nA vA nB vB):[sqr_A sqr_B c_res1 c_res2] = complex !! {
	eval_test (vA, nA);
	eval_test (vB, nB);

	[sqr_A sqr_B] = (c_sqr (vA), c_sqr (vB));

	` test equality: sqr(A * B) == sqr(A) * sqr(B) `
	eval_test (c_res1 = c_mul (sqr_A, sqr_B), ['(sqr (' nA ') * sqr (' nB ')']);
	eval_test (c_res2 = c_sqr (c_mul (vA, vB)), ['sqr (' nA ' * ' nB ')']);

	eval_test (c_sub (c_res1, c_res2), '<difference>');

	<: '\n';
	};

sqr_test_2 (['CA' CA 'CB' CB]);
sqr_test_2 (['CB' CB 'CC' CC]);
sqr_test_2 (['CC' CC 'CA' CA]);

` *
  *
  * `

ca = complex (2.3, 1.7);
cb = complex (0.6, -2.2);
cc = complex (-0.8, 1.1);

<: '\tTESTING: trigonometric sine/cosine ...\n\n';

` Complex sine/cosine evaluation test `
! sincos_test (nA vA) : [c_sin c_cos c_2 c_res1 c_res2] = complex !! {
	eval_test (vA, nA);

	[c_sin c_cos] = (c_sin (vA), c_cos (vA));
	c_2 = complex (2,0);

	` output results `
	eval_test (c_sin, ['sin (' nA ')']);
	eval_test (c_cos, ['cos (' nA ')']);

	` test equality: cos^2(A) + sin^2(A) == 1 `
	eval_test (
		c_add (c_mul(c_sin, c_sin), c_mul(c_cos, c_cos)),
		['sin^2 (' nA ') + cos^2 (' nA ')']);

	` test equality:
		sin(2*A) == 2*sin(A)*cos(A) `
	eval_test (
		c_res1 = c_sin (c_mul (vA, c_2)),
		['sin (' 2 ' * ' nA ')']);
	eval_test (
		c_res2 = c_mul (c_2, c_mul(c_sin, c_cos)),
		[2 ' * sin (' nA ') * cos (' nA ')']);

	eval_test (c_sub (c_res1, c_res2), '<difference>');

	` test equality:
		cos(2*A) == cos^2(A) - sin^2(A) `
	eval_test (
		c_res1 = c_cos (c_mul (vA, c_2)),
		['cos (' 2 ' * ' nA ')']);
	eval_test (
		c_res2 = c_sub (c_mul(c_cos, c_cos), c_mul(c_sin, c_sin)),
		['cos^2 (' nA ') - sin^2 (' nA ')']);

	eval_test (c_sub (c_res1, c_res2), '<difference>');

	<: '\n';
	};

sincos_test (['ca' ca]);
sincos_test (['cb' cb]);
sincos_test (['cc' cc]);

` Complex sine/cosine evaluation test 2 `
! sincos_test2 (nA vA nB vB) : [c_sinA c_cosA c_sinB c_cosB c_res1 c_res2] =
	complex !! {
	eval_test (vA, nA);
	eval_test (vB, nB);

	[c_sinA c_cosA] = (c_sin (vA), c_cos (vA));
	[c_sinB c_cosB] = (c_sin (vB), c_cos (vB));

	` test equality: sin(A + B) = sin(A)cos(B) + cos(A)sin(B) `
	c_res1 = c_sin (c_add (vA, vB));
	c_res2 = c_add (c_mul (c_sinA, c_cosB), c_mul (c_cosA, c_sinB));

	eval_test (c_res1, ['sin (' nA ' + ' nB ')']);
	eval_test (c_res2, ['sin(' nA ')cos(' nB ') + cos(' nA ')sin(' nB ')']);
	eval_test (c_sub (c_res1, c_res2), '<difference>');

	` test equality: cos(A + B) = cos(A)cos(B) - sin(A)sin(B) `
	c_res1 = c_cos (c_add (vA, vB));
	c_res2 = c_sub (c_mul (c_cosA, c_cosB), c_mul (c_sinA, c_sinB));

	eval_test (c_res1, ['cos (' nA ' + ' nB ')']);
	eval_test (c_res2, ['cos(' nA ')cos(' nB ') - sin(' nA ')sin(' nB ')']);
	eval_test (c_sub (c_res1, c_res2), '<difference>');

	` test equality: sin(A - B) = sin(A)cos(B) - cos(A)sin(B) `
	c_res1 = c_sin (c_sub (vA, vB));
	c_res2 = c_sub (c_mul (c_sinA, c_cosB), c_mul (c_cosA, c_sinB));

	eval_test (c_res1, ['sin (' nA ' - ' nB ')']);
	eval_test (c_res2, ['sin(' nA ')cos(' nB ') - cos(' nA ')sin(' nB ')']);
	eval_test (c_sub (c_res1, c_res2), '<difference>');

	` test equality: cos(A - B) = cos(A)cos(B) + sin(A)sin(B) `
	c_res1 = c_cos (c_sub (vA, vB));
	c_res2 = c_add (c_mul (c_cosA, c_cosB), c_mul (c_sinA, c_sinB));

	eval_test (c_res1, ['cos (' nA ' - ' nB ')']);
	eval_test (c_res2, ['cos(' nA ')cos(' nB ') + sin(' nA ')sin(' nB ')']);
	eval_test (c_sub (c_res1, c_res2), '<difference>');

	<: '\n';
	};

sincos_test2 (['cc' cc 'cb' cb]);
sincos_test2 (['cb' cb 'ca' ca]);
sincos_test2 (['ca' ca 'cc' cc]);

<: '\tTESTING: hyperbolic sine/cosine ...\n\n';

` Complex hyperbolic sine/cosine evaluation test `
! shch_test (nA vA) : [c_sinh c_cosh c_2 c_res1 c_res2] = complex !! {
	eval_test (vA, nA);

	[c_sinh c_cosh] = (c_sinh (vA), c_cosh (vA));
	c_2 = complex (2,0);

	` output results `
	eval_test (c_sinh, ['sh (' nA ')']);
	eval_test (c_cosh, ['ch (' nA ')']);

	` test equality: ch^2(A) - sh^2(A) == 1 `
	eval_test (
		c_sub (c_mul(c_cosh, c_cosh), c_mul(c_sinh, c_sinh)),
		['ch^2 (' nA ') - sh^2 (' nA ')']);

	` test equality:
		ch(2*A) == ch^2(A) + sh^2(A) `
	eval_test (
		c_res1 = c_cosh (c_mul (vA, c_2)),
		['ch (' 2 ' * ' nA ')']);
	eval_test (
		c_res2 = c_add (c_mul(c_cosh, c_cosh), c_mul(c_sinh, c_sinh)),
		['ch^2 (' nA ') + sh^2 (' nA ')']);
	eval_test (c_sub (c_res1, c_res2), '<difference>');

	` test equality:
		sh(2*A) == 2 * sh(A)ch(A) `
	eval_test (
		c_res1 = c_sinh (c_mul (vA, c_2)),
		['sh (' 2 ' * ' nA ')']);
	eval_test (
		c_res2 = c_mul (c_2, c_mul(c_sinh, c_cosh)),
		[2 ' * sh (' nA ') * ch (' nA ')']);
	eval_test (c_sub (c_res1, c_res2), '<difference>');

	<: '\n';
	};

shch_test (['ca' ca]);
shch_test (['cb' cb]);
shch_test (['cc' cc]);

` Complex hyperbolic sine/cosine evaluation test 2 `
! shch_test2 (nA vA nB vB) : [c_sinhA c_coshA c_sinhB c_coshB c_res1 c_res2] =
	complex !! {
	eval_test (vA, nA);
	eval_test (vB, nB);

	[c_sinhA c_coshA] = (c_sinh (vA), c_cosh (vA));
	[c_sinhB c_coshB] = (c_sinh (vB), c_cosh (vB));

	` test equality: sh(A + B) = sh(A)ch(B) + ch(A)sh(B) `
	c_res1 = c_sinh (c_add (vA, vB));
	c_res2 = c_add (c_mul (c_sinhA, c_coshB), c_mul (c_coshA, c_sinhB));

	eval_test (c_res1, ['sh (' nA ' + ' nB ')']);
	eval_test (c_res2, ['sh(' nA ')ch(' nB ') + ch(' nA ')sh(' nB ')']);
	eval_test (c_sub (c_res1, c_res2), '<difference>');

	` test equality: ch(A + B) = ch(A)ch(B) + sh(A)sh(B) `
	c_res1 = c_cosh (c_add (vA, vB));
	c_res2 = c_add (c_mul (c_coshA, c_coshB), c_mul (c_sinhA, c_sinhB));

	eval_test (c_res1, ['ch (' nA ' + ' nB ')']);
	eval_test (c_res2, ['ch(' nA ')ch(' nB ') + sh(' nA ')sh(' nB ')']);
	eval_test (c_sub (c_res1, c_res2), '<difference>');

	` test equality: sh(A - B) = sh(A)ch(B) - ch(A)sh(B) `
	c_res1 = c_sinh (c_sub (vA, vB));
	c_res2 = c_sub (c_mul (c_sinhA, c_coshB), c_mul (c_coshA, c_sinhB));

	eval_test (c_res1, ['sh (' nA ' - ' nB ')']);
	eval_test (c_res2, ['sh(' nA ')ch(' nB ') - ch(' nA ')sh(' nB ')']);
	eval_test (c_sub (c_res1, c_res2), '<difference>');

	` test equality: ch(A - B) = ch(A)ch(B) - sh(A)sh(B) `
	c_res1 = c_cosh (c_sub (vA, vB));
	c_res2 = c_sub (c_mul (c_coshA, c_coshB), c_mul (c_sinhA, c_sinhB));

	eval_test (c_res1, ['ch (' nA ' - ' nB ')']);
	eval_test (c_res2, ['ch(' nA ')ch(' nB ') - sh(' nA ')sh(' nB ')']);
	eval_test (c_sub (c_res1, c_res2), '<difference>');

	<: '\n';
	};

shch_test2 (['cc' cc 'cb' cb]);
shch_test2 (['cb' cb 'ca' ca]);
shch_test2 (['ca' ca 'cc' cc]);

<: '\tTESTING: exponent ...\n\n';

` Complex exponent evaluation test `
! exp_test2 (nA vA nB vB) : [c_expA c_expB c_res1 c_res2] = complex !! {
	eval_test (vA, nA);
	eval_test (vB, nB);

	[c_expA c_expB] = (c_exp (vA), c_exp (vB));

	` test equality: exp(A + B) = exp(A)exp(B) `

	eval_test (c_res1 = c_exp (c_add (vA, vB)),
		['exp (' nA ' + ' nB ')']);
	eval_test (c_res2 = c_mul (c_expA, c_expB),
		['exp(' nA ')exp(' nB ')']);
	eval_test (c_sub (c_res1, c_res2), '<difference>');

	` test equality: exp(A - B) = exp(A) / exp(B) `

	eval_test (c_res1 = c_exp (c_sub (vA, vB)),
		['exp (' nA ' - ' nB ')']);
	eval_test (c_res2 = c_div (c_expA, c_expB),
		['exp(' nA ') / exp(' nB ')']);
	eval_test (c_sub (c_res1, c_res2), '<difference>');

	<: '\n';
	};

exp_test2 (['ca' ca 'cb' cb]);
exp_test2 (['cb' cb 'cc' cc]);
exp_test2 (['cc' cc 'ca' ca]);

<: '\tTESTING: logarythm ...\n\n';

` Complex logarythm evaluation test `
! log_test2 (nA vA nB vB) : [c_logA c_logB c_res1 c_res2] = complex !! {
	eval_test (vA, nA);
	eval_test (vB, nB);

	[c_logA c_logB] = (c_log (vA), c_log (vB));

	` test equality: log(AB) = log(A) + log(B) `

	eval_test (c_res1 = c_log (c_mul (vA, vB)),
		['log (' nA ' * ' nB ')']);
	eval_test (c_res2 = c_add (c_logA, c_logB),
		['log(' nA ') + log(' nB ')']);
	eval_test (c_sub (c_res1, c_res2), '<difference>');

	` test equality: log(A/B) = log(A) - log(B) `

	eval_test (c_res1 = c_log (c_div (vA, vB)),
		['log (' nA ' / ' nB ')']);
	eval_test (c_res2 = c_sub (c_logA, c_logB),
		['log(' nA ') - log(' nB ')']);
	eval_test (c_sub (c_res1, c_res2), '<difference>');

	<: '\n';
	};

log_test2 (['ca' ca 'cb' cb]);
log_test2 (['cb' cb 'cc' cc]);
log_test2 (['cc' cc 'ca' ca]);

<: "\t--- ALL TESTS COMPLETE ---\n\n";

<: "List of variables:\n";
x_vars_ord ();
<: "\n";

<: "List of functors:\n";
x_funcs_ord ();
<: "\n";

