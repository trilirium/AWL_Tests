<Test12.awl> #17 / [1] {

  x_trace:() => 0;
  set:(A1, a_create:(3, 4, 5)) => [3 4 5];
  let:(put_A1, {
    f_put:((), "\n");
    for_inc:(k, (0, 5), for_inc:(j, (0, 4), for_inc:(i, (0, 3), f_put:((), a_elem:(A1, i, j, k), " ")), f_put:((), "\n")), f_put:((), "\n")) }) => put_A1;
  for_inc:(i, (0, 3), for_inc:(j, (0, 4), for_inc:(k, (0, 5), set:(a_elem:(A1, i, j, k), mul:(mul:(add:(i, 1), add:(j, 1)), add:(k, 1)))))) => 60;

1 2 3 
2 4 6 
3 6 9 
4 8 12 

2 4 6 
4 8 12 
6 12 18 
8 16 24 

3 6 9 
6 12 18 
9 18 27 
12 24 36 

4 8 12 
8 16 24 
12 24 36 
16 32 48 

5 10 15 
10 20 30 
15 30 45 
20 40 60 

  reval:put_A1 => ((2, 1), 1);

  f_put:((), "\n") => 1;
  for_inc:(k, (1, 4), for_inc:(j, (1, 3), for_inc:(i, (1, 2), comb:mul:(a_elem:(A1, i, j, k), 10)))) => 240;

1 2 3 
2 4 6 
3 6 9 
4 8 12 

2 4 6 
4 80 12 
6 120 18 
8 16 24 

3 6 9 
6 120 18 
9 180 27 
12 24 36 

4 8 12 
8 160 24 
12 240 36 
16 32 48 

5 10 15 
10 20 30 
15 30 45 
20 40 60 

  reval:put_A1 => ((2, 1), 1);

  f_put:((), "\n") => 1;
  for_inc:(i, (1, 2), for_inc:(j, (1, 3), for_inc:(k, (1, 4), comb:idiv:(a_elem:(A1, i, j, k), 10)))) => 24;

1 2 3 
2 4 6 
3 6 9 
4 8 12 

2 4 6 
4 8 12 
6 12 18 
8 16 24 

3 6 9 
6 12 18 
9 18 27 
12 24 36 

4 8 12 
8 16 24 
12 24 36 
16 32 48 

5 10 15 
10 20 30 
15 30 45 
20 40 60 

  reval:put_A1 => ((2, 1), 1);

  f_put:((), "\n") => 1;
  set:(A2, a_create:(10, 10)) => [10 10];
  let:(put_A2, {
    f_put:((), "\n");
    for_inc:(i, (0, 10), for_inc:(j, (0, 10), f_put:((), a_elem:(A2, i, j), " ")), f_put:((), "\n"));
    f_put:((), "\n");
    }) => put_A2;
  for_inc:(i, (0, 10), for_inc:(j, (0, 10), set:(a_elem:(A2, i, j), sub:(i, j)))) => 0;

0 -1 -2 -3 -4 -5 -6 -7 -8 -9 
1 0 -1 -2 -3 -4 -5 -6 -7 -8 
2 1 0 -1 -2 -3 -4 -5 -6 -7 
3 2 1 0 -1 -2 -3 -4 -5 -6 
4 3 2 1 0 -1 -2 -3 -4 -5 
5 4 3 2 1 0 -1 -2 -3 -4 
6 5 4 3 2 1 0 -1 -2 -3 
7 6 5 4 3 2 1 0 -1 -2 
8 7 6 5 4 3 2 1 0 -1 
9 8 7 6 5 4 3 2 1 0 

  reval:put_A2 => ();

  f_put:((), "\n") => 1;
  for_inc:(i, 10, for_inc:(j, i, swap:(a_elem:(A2, i, j), a_elem:(A2, j, i)))) => ();

0 1 2 3 4 5 6 7 8 9 
-1 0 1 2 3 4 5 6 7 8 
-2 -1 0 1 2 3 4 5 6 7 
-3 -2 -1 0 1 2 3 4 5 6 
-4 -3 -2 -1 0 1 2 3 4 5 
-5 -4 -3 -2 -1 0 1 2 3 4 
-6 -5 -4 -3 -2 -1 0 1 2 3 
-7 -6 -5 -4 -3 -2 -1 0 1 2 
-8 -7 -6 -5 -4 -3 -2 -1 0 1 
-9 -8 -7 -6 -5 -4 -3 -2 -1 0 

  reval:put_A2 => ();

  f_put:((), "\n") => 1;
  ! QuickSort:(array lo0 hi0) [6] = {
    set:((lo, hi), lo0, hi0);
    if:(gt:(hi0, lo0), {
      set:(mid, a_elem:(array, idiv:(add:(lo0, hi0), 2)));
      while:(le:(lo, hi), {
	while:(c_and:(lt:(lo, hi0), lt:(a_elem:(array, lo), mid)), inc:lo);
	while:(c_and:(gt:(hi, lo0), gt:(a_elem:(array, hi), mid)), dec:hi);
	if:(le:(lo, hi), swap:(a_elem:(array, inc_p:lo), a_elem:(array, dec_p:hi)), ) });
      if:(lt:(lo0, hi), .QuickSort:(array, lo0, hi), );
      if:(lt:(lo, hi0), .QuickSort:(array, lo, hi0), );
      }, ) } => QuickSort:;
  set:(N, 30) => 30;
  set:(a_test, a_create:N) => [30];
  for_inc:(i, N, set:(a_elem:(a_test, i), sub:(N, i))) => 1;
  QuickSort:(a_test, 0, sub:(N, 1)) => ();
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 
  {
    for_inc:(i, N, f_put:((), a_elem:(a_test, i), " "));
    f_put:((), "\n") } => 1;
  ! permute:(N do_it) [3] = {
    set:(A, a_create:N);
    ! r_perm:(n) [2] = if:(ne:(n, permute.N), {
      set:(a_elem:(permute.A, n), n);
      inc_p:n;
      for_dec:(i, (1, n), swap:(a_elem:(permute.A, i), a_elem:(permute.A, sub:(i, 1))));
      permute.r_perm:n;
      for_inc:(i, (1, n), {
	swap:(a_elem:(permute.A, i), a_elem:(permute.A, sub:(i, 1)));
	permute.r_perm:n }) }, apply:(permute.do_it, permute.N, permute.A));
    r_perm:0 } => permute:;

[3210]
[2310]
[2130]
[2103]
[3120]
[1320]
[1230]
[1203]
[3102]
[1302]
[1032]
[1023]
[3201]
[2301]
[2031]
[2013]
[3021]
[0321]
[0231]
[0213]
[3012]
[0312]
[0132]
[0123]

  {
    f_put:((), "\n");
    permute:(4, ! (N A) [3] = {
      f_put:((), "[");
      for_inc:(i, N, f_put:((), a_elem:(A, i)));
      f_put:((), "]\n") });
    f_put:((), "\n");
    } => ();

<43210>
<34210>
<32410>
<32140>
<32104>
<42310>
<24310>
<23410>
<23140>
<23104>
<42130>
<24130>
<21430>
<21340>
<21304>
<42103>
<24103>
<21403>
<21043>
<21034>
<43120>
<34120>
<31420>
<31240>
<31204>
<41320>
<14320>
<13420>
<13240>
<13204>
<41230>
<14230>
<12430>
<12340>
<12304>
<41203>
<14203>
<12403>
<12043>
<12034>
<43102>
<34102>
<31402>
<31042>
<31024>
<41302>
<14302>
<13402>
<13042>
<13024>
<41032>
<14032>
<10432>
<10342>
<10324>
<41023>
<14023>
<10423>
<10243>
<10234>
<43201>
<34201>
<32401>
<32041>
<32014>
<42301>
<24301>
<23401>
<23041>
<23014>
<42031>
<24031>
<20431>
<20341>
<20314>
<42013>
<24013>
<20413>
<20143>
<20134>
<43021>
<34021>
<30421>
<30241>
<30214>
<40321>
<04321>
<03421>
<03241>
<03214>
<40231>
<04231>
<02431>
<02341>
<02314>
<40213>
<04213>
<02413>
<02143>
<02134>
<43012>
<34012>
<30412>
<30142>
<30124>
<40312>
<04312>
<03412>
<03142>
<03124>
<40132>
<04132>
<01432>
<01342>
<01324>
<40123>
<04123>
<01423>
<01243>
<01234>

  {
    f_put:((), "\n");
    permute:(5, ! (N A) [3] = {
      f_put:((), "<");
      for_inc:(i, N, f_put:((), a_elem:(A, i)));
      f_put:((), ">\n") });
    f_put:((), "\n");
    } => ();
  set:(H1, h_create:()) => <0 / 16>;
  H1 => <0 / 16>;
  set:(h_elem:(H1, "alpha"), "AAaa") => "AAaa";
  set:(h_elem:(H1, "beta"), "BBbb") => "BBbb";
  set:(h_elem:(H1, "gamma"), "CCcc") => "CCcc";
  set:(h_elem:(H1, "delta"), "DDdd") => "DDdd";

- alpha => AAaa
- beta => BBbb
- gamma => CCcc
- delta => DDdd

  {
    f_put:((), "\n");
    l_loop:(key, ("alpha", "beta", "gamma", "delta"), f_put:((), "- ", key, " => ", h_elem:(H1, key), "\n"));
    f_put:((), "\n");
    } => ();
  H1 => <4 / 16>;
  set:(k_codes, "A-a", "E-e", "I-i", "O-o", "U-u") => ("A-a", "E-e", "I-i", "O-o", "U-u");
  l_loop:(K, k_codes, for_inc:(I, 10, set:(h_elem:(H1, I, K), s_cat:(s_cat:(s_cat:(I, "["), K), "]")))) => "9[U-u]";
  H1 => <54 / 16>;
  for_inc:(K, 12, l_loop:(I, k_codes, set:(h_elem:(H1, I, K), s_cat:(s_cat:(I, "::"), K)))) => "U-u::11";
  H1 => <114 / 16>;

A-a:9 = 9[A-a]
E-e:9 = 9[E-e]
I-i:9 = 9[I-i]
O-o:9 = 9[O-o]
U-u:9 = 9[U-u]
A-a:8 = 8[A-a]
E-e:8 = 8[E-e]
I-i:8 = 8[I-i]
O-o:8 = 8[O-o]
U-u:8 = 8[U-u]
A-a:7 = 7[A-a]
E-e:7 = 7[E-e]
I-i:7 = 7[I-i]
O-o:7 = 7[O-o]
U-u:7 = 7[U-u]
A-a:6 = 6[A-a]
E-e:6 = 6[E-e]
I-i:6 = 6[I-i]
O-o:6 = 6[O-o]
U-u:6 = 6[U-u]
A-a:5 = 5[A-a]
E-e:5 = 5[E-e]
I-i:5 = 5[I-i]
O-o:5 = 5[O-o]
U-u:5 = 5[U-u]
A-a:4 = 4[A-a]
E-e:4 = 4[E-e]
I-i:4 = 4[I-i]
O-o:4 = 4[O-o]
U-u:4 = 4[U-u]
A-a:3 = 3[A-a]
E-e:3 = 3[E-e]
I-i:3 = 3[I-i]
O-o:3 = 3[O-o]
U-u:3 = 3[U-u]
A-a:2 = 2[A-a]
E-e:2 = 2[E-e]
I-i:2 = 2[I-i]
O-o:2 = 2[O-o]
U-u:2 = 2[U-u]
A-a:1 = 1[A-a]
E-e:1 = 1[E-e]
I-i:1 = 1[I-i]
O-o:1 = 1[O-o]
U-u:1 = 1[U-u]
A-a:0 = 0[A-a]
E-e:0 = 0[E-e]
I-i:0 = 0[I-i]
O-o:0 = 0[O-o]
U-u:0 = 0[U-u]

  {
    f_put:((), "\n");
    for_dec:(I, 10, l_loop:(K, k_codes, f_put:((), K, ":", I, " = ", h_lookup:(H1, I, K), "\n")));
    f_put:((), "\n");
    } => ();

	#H1: 104
	#H1: 94
	#H1: 84
	#H1: 74
	#H1: 64

  {
    f_put:((), "\n");
    l_loop_r:(K, k_codes, {
      for_dec:(I, 10, unless:(s_eq:(s_cat:(s_cat:(s_cat:(I, "["), K), "]"), h_remove:(H1, I, K)), f_put:((), "(Error at ", I, ", ", K, ")\n")));
      f_put:((), "\t#H1: ", h_count:H1, "\n") });
    f_put:((), "\n");
    } => ();

	#H1: 52
	#H1: 40
	#H1: 28
	#H1: 16
	#H1: 4

  {
    f_put:((), "\n");
    l_loop_r:(I, k_codes, {
      for_dec:(K, 12, unless:(s_eq:(h_remove:(H1, I, K), s_cat:(s_cat:(I, "::"), K)), f_put:((), "(Error at ", I, ", ", K, ")\n")));
      f_put:((), "\t#H1: ", h_count:H1, "\n") });
    f_put:((), "\n");
    } => ();
  H1 => <4 / 16>;
  set:(ZZ, ) => ();
  l_loop_r:(K, ("alpha", "beta", "gamma", "delta"), l_push:(ZZ, h_remove:(H1, K))) => ("AAaa", "BBbb", "CCcc", "DDdd");
  ZZ => ("AAaa", "BBbb", "CCcc", "DDdd");
  H1 => <0 / 16>;
  h_count:H1 => 0;

} <Test12.awl> #216 / [51]
