<Test15.awl> #13 / [1] {

  x_trace:() => 0;
  set:(aa, "Aa", "Ee", "Ii", "Oo", "Uu", "Yy") => ("Aa", "Ee", "Ii", "Oo", "Uu", "Yy");
  set:(bb, "111", "333", "555", "777", "999") => ("111", "333", "555", "777", "999");
  aa => ("Aa", "Ee", "Ii", "Oo", "Uu", "Yy");
  bb => ("111", "333", "555", "777", "999");
  l_cat:(aa, bb) => ("Aa", "Ee", "Ii", "Oo", "Uu", "Yy", "111", "333", "555", "777", "999");
  l_cat:(bb, aa) => ("111", "333", "555", "777", "999", "Aa", "Ee", "Ii", "Oo", "Uu", "Yy");

Aa
Ee
Ii
Oo
Uu
Yy
111
333
555
777
999

  {
    f_put:((), "\n");
    for_inc:(i, (0, 11), f_put:((), l_item:(i, l_cat:(aa, bb)), "\n"));
    f_put:((), "\n");
    } => ();

Aa
Ee
Ii
Oo
Uu
Yy

  {
    f_put:((), "\n");
    for_inc:(i, (0, 6), f_put:((), l_item:(mul:(i, 7), l_rep:(6, aa)), "\n"));
    f_put:((), "\n");
    } => ();

111
333
555
777
999

  {
    f_put:((), "\n");
    for_inc:(i, (0, 5), f_put:((), l_item:(mul:(i, 6), l_rep:(5, bb)), "\n"));
    f_put:((), "\n");
    } => ();
  set:(ML1, (("(111)", "(112)", "(113)"), ("(121)", "(122)"), "(131)", "(132)", "(133)"), "(21)", ("(221)", "(222)", ("(2231)", "(2232)"), "(224)"), "(23)", "(24)") => ((("(111)", "(112)", "(113)"), ("(121)", "(122)"), "(131)", "(132)", "(133)"), "(21)", ("(221)", "(222)", ("(2231)", "(2232)"), "(224)"), "(23)", "(24)");
  set:(ML2, ("{11}", "{12}", "{13}", "{14}", "{15}"), (("{211}", "{212}", "{213}", "{214}"), ("{221}", "{222}", "{223}"), "{231}", "{232}"), "{31}", ("{321}", "{322}", "{323}"), ("{331}", "{332}"), "{34}") => (("{11}", "{12}", "{13}", "{14}", "{15}"), (("{211}", "{212}", "{213}", "{214}"), ("{221}", "{222}", "{223}"), "{231}", "{232}"), "{31}", ("{321}", "{322}", "{323}"), ("{331}", "{332}"), "{34}");
(111)(112)(113)(121)(122)(131)(132)(133)(21)(221)(222)(2231)(2232)(224)(23)(24)
{11}{12}{13}{14}{15}{211}{212}{213}{214}{221}{222}{223}{231}{232}{31}{321}{322}{323}{331}{332}{34}
  f_put:((), ML1, "\n", ML2, "\n") => 39;
(111)(112)(113)(121)(122)(131)(132)(133)(21)(221)(222)(2231)(2232)(224)(23)(24)
(111)(112)(113)(121)(122)(131)(132)(133)
(111)(112)(113)
(111)
  for_inc:(i, 4, f_put:((), l_head_by:(i, ML1), "\n")) => 2;

{11}
{11}{12}{13}{14}{15}
{11}{12}{13}{14}{15}{211}{212}{213}{214}{221}{222}{223}{231}{232}{31}{321}{322}{323}{331}{332}{34}
  for_dec:(i, 4, f_put:((), l_head_by:(i, ML2), "\n")) => 22;
(24)
(23)(24)
(221)(222)(2231)(2232)(224)(23)(24)
(21)(221)(222)(2231)(2232)(224)(23)(24)
(111)(112)(113)(121)(122)(131)(132)(133)(21)(221)(222)(2231)(2232)(224)(23)(24)
  for_dec:(i, 5, f_put:((), l_tail_by:(i, ML1), "\n")) => 17;
{11}{12}{13}{14}{15}{211}{212}{213}{214}{221}{222}{223}{231}{232}{31}{321}{322}{323}{331}{332}{34}
{211}{212}{213}{214}{221}{222}{223}{231}{232}{31}{321}{322}{323}{331}{332}{34}
{31}{321}{322}{323}{331}{332}{34}
{321}{322}{323}{331}{332}{34}
{331}{332}{34}
  for_inc:(i, 5, f_put:((), l_tail_by:(i, ML2), "\n")) => 4;
  swap:(l_head_by:(2, ML1), l_tail_by:(3, ML2)) => ();
{321}{322}{323}{331}{332}{34}(121)(122)(131)(132)(133)(21)(221)(222)(2231)(2232)(224)(23)(24)
{11}{12}{13}{14}{15}{211}{212}{213}{214}{221}{222}{223}{231}{232}{31}(111)(112)(113)
  f_put:((), ML1, "\n", ML2, "\n") => 39;
  swap:(l_head_by:(2, ML1), l_tail_by:(3, ML2)) => ();
  set:(nlist_v, 1.2, 2.3, 3.4, 4.5, 5.6, 6.7, 7.8, 8.9) => (1.2, 2.3, 3.4, 4.5, 5.6, 6.7, 7.8, 8.9);
  set:(temp_v, nlist_v) => (1.2, 2.3, 3.4, 4.5, 5.6, 6.7, 7.8, 8.9);
  for_inc:(i, (2, 5), inc_p:l_item:(i, temp_v)) => 5.6;
  nlist_v => (1.2, 2.3, 4.4, 5.5, 6.6, 6.7, 7.8, 8.9);
  set:(temp_v, l_ref:nlist_v) => (1.2, 2.3, 4.4, 5.5, 6.6, 6.7, 7.8, 8.9);
  for_inc:(i, (3, 7), inc_p:l_item:(i, temp_v)) => 7.8;
  nlist_v => (1.2, 2.3, 4.4, 6.5, 7.6, 7.7, 8.8, 8.9);
  for_dec:(i, (3, 7), dec:l_item:(i, nlist_v)) => 5.5;
  temp_v => (1.2, 2.3, 4.4, 5.5, 6.6, 6.7, 7.8, 8.9);
  set:(nlist_c, (1, (2, 3), 4), ((5, 6), 7), (8, 9), 0) => ((1, (2, 3), 4), ((5, 6), 7), (8, 9), 0);
  set:(temp_c, l_ref:l_item:(1, nlist_c), (22, 33, 44), l_ref:l_item:(2, nlist_c), 555, l_ref:l_item:(0, nlist_c), ) => (((5, 6), 7), (22, 33, 44), (8, 9), 555, (1, (2, 3), 4), );
  comb:mul:(l_item:(0, l_item:(2, temp_c)), 3) => 24;
  comb:mul:(l_item:(1, l_item:(1, l_item:(4, temp_c))), 4) => 12;
  comb:mul:(l_item:(1, l_item:(0, temp_c)), 2) => 14;
  nlist_c => ((1, (2, 12), 4), ((5, 6), 14), (24, 9), 0);
  comb:idiv:(l_item:(1, l_item:(1, l_item:(0, nlist_c))), 4) => 3;
  comb:idiv:(l_item:(1, l_item:(1, nlist_c)), 2) => 7;
  comb:idiv:(l_item:(0, l_item:(2, nlist_c)), 3) => 8;
  set:(ZZ_aa, "") => "";
  l_loop:(v_aa, aa, comb:s_cat:(ZZ_aa, s_cat:(s_cat:("{", v_aa), "}"))) => "{Aa}{Ee}{Ii}{Oo}{Uu}{Yy}";
  ZZ_aa => "{Aa}{Ee}{Ii}{Oo}{Uu}{Yy}";
  set:(YY_aa, "") => "";
  l_loop_r:(v_aa, aa, comb:s_cat:(YY_aa, s_cat:(s_cat:("<", v_aa), ">"))) => "<Yy><Uu><Oo><Ii><Ee><Aa>";
  YY_aa => "<Yy><Uu><Oo><Ii><Ee><Aa>";
  set:(S, 0) => 0;
  for_inc:(i, 10, if:(and:(i, 1), comb:add:(S, mul:(i, 2)), )) => 50;
Odds 0..10: 50
  f_put:((), "Odds 0..10: ", S, "\n") => 3;
  set:(S, 0) => 0;
  for_inc:(i, 10, comb:add:(S, mul:(i, 2))) => 90;
All 0..10: 90
  f_put:((), "All 0..10: ", S, "\n") => 3;
  set:(TypeList, (is_undef:, "undef"), (is_int:, "integer"), (is_float:, "float"), (is_string:, "string"), (is_var:, "variable"), (is_list:, "list"), (is_term:, "term"), (is_block:, "block"), ) => ((is_undef:, "undef"), (is_int:, "integer"), (is_float:, "float"), (is_string:, "string"), (is_var:, "variable"), (is_list:, "list"), (is_term:, "term"), (is_block:, "block"), );
  ! ShowTypeOf:(x) [2] = {
    f_put:((), "Type of ");
    x_trace:(2, x);
    f_put:((), ": ");
    l_loop:(t, .TypeList, if:(apply:(l_item:(0, t), x), f_put:((), l_item:(1, t)), ));
    f_put:((), "\n");
    } => ShowTypeOf:;

----
Type of (): undef
Type of 77: integer
Type of 1.7320508: float
Type of "abcabcabc": string
Type of (6, 6, 6, 6, 6): list
Type of S: variable
Type of mul:(foo, bar): term
Type of {
    set:(foo, add:(bar, 1));
    set:(bar, sub:(foo, 2)) }: block

----
  {
    f_put:((), "\n----\n");
    ShowTypeOf:NoSuchVariable;
    ShowTypeOf:add:(22, 55);
    ShowTypeOf:sqr:3;
    ShowTypeOf:s_rep:("abc", 3);
    ShowTypeOf:l_rep:(5, mul:(2, 3));
    ShowTypeOf:deval:S;
    ShowTypeOf:deval:mul:(foo, bar);
    ShowTypeOf:deval:{
      set:(foo, add:(bar, 1));
      set:(bar, sub:(foo, 2)) };
    f_put:((), "\n----\n");
    } => ();
  ! l_slice:(list indexes) [2] = l_map:(! (i) [1] = l_item:(i, l_slice.list), indexes) => l_slice:;
  l_slice:(nlist_v, 1, 3, 5, 7) => (2.3, 5.5, 6.7, 8.9);
  l_slice:(nlist_v, 2, 1, 6, 5, 3, 4) => (4.4, 2.3, 7.8, 6.7, 5.5, 6.6);

    temp_v = (1.2, 2.3, 4.4, 5.5, 6.6, 6.7, 7.8, 8.9);
    bb = ("111", "333", "555", "777", "999");
    bar;
    nlist_v = (1.2, 2.3, 4.4, 5.5, 6.6, 6.7, 7.8, 8.9);
    ML2 = (("{11}", "{12}", "{13}", "{14}", "{15}"), (("{211}", "{212}", "{213}", "{214}"), ("{221}", "{222}", "{223}"), "{231}", "{232}"), "{31}", ("{321}", "{322}", "{323}"), ("{331}", "{332}"), "{34}");
    S = 90;
    ML1 = ((("(111)", "(112)", "(113)"), ("(121)", "(122)"), "(131)", "(132)", "(133)"), "(21)", ("(221)", "(222)", ("(2231)", "(2232)"), "(224)"), "(23)", "(24)");
    aa = ("Aa", "Ee", "Ii", "Oo", "Uu", "Yy");
    YY_aa = "<Yy><Uu><Oo><Ii><Ee><Aa>";
    ZZ_aa = "{Aa}{Ee}{Ii}{Oo}{Uu}{Yy}";
    nlist_c = ((1, (2, 3), 4), ((5, 6), 7), (8, 9), 0);
    v_aa = "Aa";
    temp_c = (((5, 6), 7), (22, 33, 44), (8, 9), 555, (1, (2, 3), 4), );
    i = 9;
    NoSuchVariable;
    foo;
    TypeList = ((is_undef:, "undef"), (is_int:, "integer"), (is_float:, "float"), (is_string:, "string"), (is_var:, "variable"), (is_list:, "list"), (is_term:, "term"), (is_block:, "block"), );

  x_vars:() => 17;

    ! l_slice:(list indexes) [2] = l_map:(! (i) [1] = l_item:(i, l_slice.list), indexes);
    ! ShowTypeOf:(x) [2] = {
      f_put:((), "Type of ");
      x_trace:(2, x);
      f_put:((), ": ");
      l_loop:(t, .TypeList, if:(apply:(l_item:(0, t), x), f_put:((), l_item:(1, t)), ));
      f_put:((), "\n");
      };

  x_funcs:() => 2;

} <Test15.awl> #166 / [58]
