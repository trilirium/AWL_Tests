
`
	+---+---+---+---+---+---+
	|	'Test_6.awl': #6
	|
	|	AWL libraries/tests.
	|	Written by trilirium
	|	Public domain.
	+---+---+---+---+---+---+
`


` Various string operations `

x_trace();

s1 = "Hello!";
s2 = "Goodbye!";

r1 := s1;
^r1;
r2 := s2;
^r2;

"[... " +$ "|||" +$ " ...]";

'[' +$ (s1 +$ ']');

("{ " +$ s1) +$ " }";

s = s1;
s;
s = s2;
s;
s = "no text";

s1 = s2 = s;
s1;
s2;

"+++" +$ "---";

("[" +$ s1 +$ ", ") +$ (s2 +$ "]");

s = (s1 = "<1111>") +$ (s2 = "<2222>");
s;

r := ^r1*$2 +$ " <> " +$ ^r2*$3;
^r;

Lr = #$^r;
Lr1 = #$^r1;
Lr2 = #$^r2;

Lr + Lr1 + Lr2;

` Must be zero `
#$ ("{ " +$ ^r1*$3 +$ " - " +$ ^r2*$4 +$ " }") -
	(2 + Lr1*3 + 3 + Lr2*4 + 2);

p = "[:" +$ ('{' +$ ^r1 +$ '}') *$ 2 +$ " . " +$ ('(' +$ ^r2 +$ ')') *$ 5 +$ ":]";

(#$p, (2 + (2 + Lr1)*2 + 3 + (2 + Lr2)*5 + 2));

` String lists `

sl1 = ['alpha' 'beta' 'gamma' 'delta' 'epsilon'];
sl2 = ["Jan" "Feb" "Mar" "Apr" "May"];

sl1;
sl2;

S_0_1_2 := S[0] +$ '->' +$ S[1] +$ '->' +$ S[2];

join_S := {
	s = '(';
	i = 0;
	(i < #S) ?? (s = s +$ S[i++] +$ (i <> #S ? ', ' : ''));
	s +$ ')'
	};

S = sl1;
^S_0_1_2;
^join_S;

S = sl2;
^S_0_1_2;
^join_S;

` Numeric conversions `

12.23 +$ 45.56 +$ 78.89;

i = 0;
p = '';

i++ < 10 ?? (p = +$: '[' +$ i +$ ']');

p;

i = 0;
na = i;
++i < 10 ?? ( na = (sqr (i), na) );

na;

S = na;			` (TODO...) `
^S_0_1_2;
^join_S;

12*23 ?<$ 16*17;
12*23 ?>$ 16*17;

22.3 *$ 3 ?<$ 223.1 *$ 2;
22.3 *$ 3 ?>$ 223.1 *$ 2;

((v1 = 2*1111) <$ (v2 = 3*111), (v3 = 4*1111) >$ (v4 = 5*111));

'12' * '5';
'122'*'2' + '322'*'3';

(v1 < v2, v3 > v4);

(v1 <= v3, v2 <= v4);

(v2 >=$ v4, v1 >=$ v3);

(v1, v2, v3, v4);

(v1 +$ v2 ?<$ v3 +$ v4, v3 +$ v4 ?>$ v1 +$ v2);
(v2 +$ v3 ?<$ v1 +$ v4, v4 +$ v1 ?>$ v3 +$ v2);

` mixed string/numeric `

2*$5 + 3*$4 + 4*$3;

(13.3*2) *$ 3 +$ (21.6*4) *$ 2;

` string slicing `

vv = "0123456789";

{	<: '\n';
	for_inc (i, 0..11, <: ("-- [", vv $[..i], ']\n'));
	for_dec (i, 0..11, <: ("-- [", vv $[..i], ']\n'));
	<: '\n';
	};

{	<: '\n';
	for_dec (i, 0..11, <: ("++ [", vv $[i..], ']\n'));
	for_inc (i, 0..11, <: ("++ [", vv $[i..], ']\n'));
	<: '\n';
	};

{	<: '\n';
	for_inc (i, -10..11, <: ("<< [", vv $[i..i+10], "]\n"));
	<: '\n';
	};

{	<: '\n';
	for_dec (i, 0..21, <: (">> [", vv $[i-10..i], "]\n"));
	<: '\n';
	};

VV_a = VV_b = '\n';

for_inc (i, 0..11, VV_a =+$: vv $[..i] +$ ' ' +$ vv $[i..] +$ '\n');
for_dec (i, 0..11, VV_b =+$: vv $[..i] +$ ' ' +$ vv $[i..] +$ '\n');

<: ['\n' VV_a VV_b '\n'];

rr = '1 2 3 4 5 6 7 8 9';

{	<: '\n';
	for_inc (i, 9, <: ('= ', rr$[2*i+1], '\n'));
	for_dec (i, 9, <: ('= ', rr$[2*i+1], '\n'));
	<: '\n';
	};

x_vars_ord();

