<Array1.awl> #20 / [2] {

  x_trace:() => 0;
  ! expect:(a b) [2] = if:(differ:(a, b), f_put:((), "\aFailed: ", a, "<>", b, "\n")) => expect:;
  ! array_insdel_1D:(n_elem f_elem) [4] = {
    f_put:((), "Testing 1D array insertion/deletion: ", n_elem, "^", f_elem, ".\n\n");
    set:(test1, array:n_elem);
    a_init_all:(test1, ! (R) [1] = R);
    set:(test2, a_copy:test1);
    for_dec:(.N, n_elem, a_insert:(test1, 0, (.N, add:(.N, 1)), f_elem));
    .array_dump:test1;
    .expect:(mul:(n_elem, 2), a_dims:test1);
    for_inc:(.N, n_elem, a_delete:(test1, 0, .N, add:(.N, 1)));
    .expect:(test1, test2);
    f_put:((), "\nDone.\n");
    } => array_insdel_1D:;
Testing 1D array insertion/deletion: 16^111.

[32] = [111, 0, 111, 0, 111, 0, 111, 0, 111, 0, 111, 0, 111, 0, 111, 0, 111, 0, 111, 0, 111, 0, 111, 0, 111, 0, 111, 0, 111, 0, 111, 0]

Done.
  array_insdel_1D:(16, 111) => ();
  ! array_insdel_2D:(n_row n_col f_row f_col) [6] = {
    f_put:((), "Testing 2D array insertion/deletion: ", n_row, "^", f_row, " * ", n_col, "^", f_col, ".\n\n");
    set:(test1, array:(n_row, n_col));
    a_init_all:(test1, ! (R C) [2] = add:(mul:(R, array_insdel_2D.n_col), C));
    set:(test2, a_copy:test1);
    for_dec:(.R, n_row, a_insert:(test1, 0, (.R, add:(.R, 1)), f_row));
    for_dec:(.C, n_col, a_insert:(test1, 1, (.C, add:(.C, 1)), f_col));
    .array_dump:test1;
    .expect:((mul:(n_row, 2), mul:(n_col, 2)), a_dims:test1);
    for_inc:(.R, n_row, a_delete:(test1, 0, .R, add:(.R, 1)));
    for_inc:(.C, n_col, a_delete:(test1, 1, .C, add:(.C, 1)));
    .expect:(test1, test2);
    f_put:((), "\nDone.\n");
    } => array_insdel_2D:;
Testing 2D array insertion/deletion: 10^101 * 8^202.

[20 16] = [[202, 101, 202, 101, 202, 101, 202, 101, 202, 101, 202, 101, 202, 101, 202, 101], [202, 0, 202, 1, 202, 2, 202, 3, 202, 4, 202, 5, 202, 6, 202, 7], [202, 101, 202, 101, 202, 101, 202, 101, 202, 101, 202, 101, 202, 101, 202, 101], [202, 8, 202, 9, 202, 10, 202, 11, 202, 12, 202, 13, 202, 14, 202, 15], [202, 101, 202, 101, 202, 101, 202, 101, 202, 101, 202, 101, 202, 101, 202, 101], [202, 16, 202, 17, 202, 18, 202, 19, 202, 20, 202, 21, 202, 22, 202, 23], [202, 101, 202, 101, 202, 101, 202, 101, 202, 101, 202, 101, 202, 101, 202, 101], [202, 24, 202, 25, 202, 26, 202, 27, 202, 28, 202, 29, 202, 30, 202, 31], [202, 101, 202, 101, 202, 101, 202, 101, 202, 101, 202, 101, 202, 101, 202, 101], [202, 32, 202, 33, 202, 34, 202, 35, 202, 36, 202, 37, 202, 38, 202, 39], [202, 101, 202, 101, 202, 101, 202, 101, 202, 101, 202, 101, 202, 101, 202, 101], [202, 40, 202, 41, 202, 42, 202, 43, 202, 44, 202, 45, 202, 46, 202, 47], [202, 101, 202, 101, 202, 101, 202, 101, 202, 101, 202, 101, 202, 101, 202, 101], [202, 48, 202, 49, 202, 50, 202, 51, 202, 52, 202, 53, 202, 54, 202, 55], [202, 101, 202, 101, 202, 101, 202, 101, 202, 101, 202, 101, 202, 101, 202, 101], [202, 56, 202, 57, 202, 58, 202, 59, 202, 60, 202, 61, 202, 62, 202, 63], [202, 101, 202, 101, 202, 101, 202, 101, 202, 101, 202, 101, 202, 101, 202, 101], [202, 64, 202, 65, 202, 66, 202, 67, 202, 68, 202, 69, 202, 70, 202, 71], [202, 101, 202, 101, 202, 101, 202, 101, 202, 101, 202, 101, 202, 101, 202, 101], [202, 72, 202, 73, 202, 74, 202, 75, 202, 76, 202, 77, 202, 78, 202, 79]]

Done.
  array_insdel_2D:(10, 8, 101, 202) => ();
  ! array_insdel_3D:(n_row n_col n_pag f_row f_col f_pag) [8] = {
    f_put:((), "Testing 3D array insertion/deletion: ", n_pag, "^", f_pag, " * ", n_row, "^", f_row, " * ", n_col, "^", f_col, ".\n\n");
    set:(test1, array:(n_pag, n_row, n_col));
    a_init_all:(test1, ! (P R C) [3] = add:(mul:(add:(mul:(P, array_insdel_3D.n_row), R), array_insdel_3D.n_col), C));
    set:(test2, a_copy:test1);
    for_dec:(.P, n_pag, a_insert:(test1, 0, (.P, add:(.P, 1)), f_pag));
    for_dec:(.R, n_row, a_insert:(test1, 1, (.R, add:(.R, 1)), f_row));
    for_dec:(.C, n_col, a_insert:(test1, 2, (.C, add:(.C, 1)), f_col));
    .array_dump:test1;
    .expect:((mul:(n_pag, 2), mul:(n_row, 2), mul:(n_col, 2)), a_dims:test1);
    for_inc:(.P, n_pag, a_delete:(test1, 0, .P, add:(.P, 1)));
    for_inc:(.R, n_row, a_delete:(test1, 1, .R, add:(.R, 1)));
    for_inc:(.C, n_col, a_delete:(test1, 2, .C, add:(.C, 1)));
    .expect:(test1, test2);
    f_put:((), "\nDone.\n");
    } => array_insdel_3D:;
Testing 3D array insertion/deletion: 4^330 * 5^110 * 3^220.

[8 10 6] = [[[220, 110, 220, 110, 220, 110], [220, 330, 220, 330, 220, 330], [220, 110, 220, 110, 220, 110], [220, 330, 220, 330, 220, 330], [220, 110, 220, 110, 220, 110], [220, 330, 220, 330, 220, 330], [220, 110, 220, 110, 220, 110], [220, 330, 220, 330, 220, 330], [220, 110, 220, 110, 220, 110], [220, 330, 220, 330, 220, 330]], [[220, 110, 220, 110, 220, 110], [220, 0, 220, 1, 220, 2], [220, 110, 220, 110, 220, 110], [220, 3, 220, 4, 220, 5], [220, 110, 220, 110, 220, 110], [220, 6, 220, 7, 220, 8], [220, 110, 220, 110, 220, 110], [220, 9, 220, 10, 220, 11], [220, 110, 220, 110, 220, 110], [220, 12, 220, 13, 220, 14]], [[220, 110, 220, 110, 220, 110], [220, 330, 220, 330, 220, 330], [220, 110, 220, 110, 220, 110], [220, 330, 220, 330, 220, 330], [220, 110, 220, 110, 220, 110], [220, 330, 220, 330, 220, 330], [220, 110, 220, 110, 220, 110], [220, 330, 220, 330, 220, 330], [220, 110, 220, 110, 220, 110], [220, 330, 220, 330, 220, 330]], [[220, 110, 220, 110, 220, 110], [220, 15, 220, 16, 220, 17], [220, 110, 220, 110, 220, 110], [220, 18, 220, 19, 220, 20], [220, 110, 220, 110, 220, 110], [220, 21, 220, 22, 220, 23], [220, 110, 220, 110, 220, 110], [220, 24, 220, 25, 220, 26], [220, 110, 220, 110, 220, 110], [220, 27, 220, 28, 220, 29]], [[220, 110, 220, 110, 220, 110], [220, 330, 220, 330, 220, 330], [220, 110, 220, 110, 220, 110], [220, 330, 220, 330, 220, 330], [220, 110, 220, 110, 220, 110], [220, 330, 220, 330, 220, 330], [220, 110, 220, 110, 220, 110], [220, 330, 220, 330, 220, 330], [220, 110, 220, 110, 220, 110], [220, 330, 220, 330, 220, 330]], [[220, 110, 220, 110, 220, 110], [220, 30, 220, 31, 220, 32], [220, 110, 220, 110, 220, 110], [220, 33, 220, 34, 220, 35], [220, 110, 220, 110, 220, 110], [220, 36, 220, 37, 220, 38], [220, 110, 220, 110, 220, 110], [220, 39, 220, 40, 220, 41], [220, 110, 220, 110, 220, 110], [220, 42, 220, 43, 220, 44]], [[220, 110, 220, 110, 220, 110], [220, 330, 220, 330, 220, 330], [220, 110, 220, 110, 220, 110], [220, 330, 220, 330, 220, 330], [220, 110, 220, 110, 220, 110], [220, 330, 220, 330, 220, 330], [220, 110, 220, 110, 220, 110], [220, 330, 220, 330, 220, 330], [220, 110, 220, 110, 220, 110], [220, 330, 220, 330, 220, 330]], [[220, 110, 220, 110, 220, 110], [220, 45, 220, 46, 220, 47], [220, 110, 220, 110, 220, 110], [220, 48, 220, 49, 220, 50], [220, 110, 220, 110, 220, 110], [220, 51, 220, 52, 220, 53], [220, 110, 220, 110, 220, 110], [220, 54, 220, 55, 220, 56], [220, 110, 220, 110, 220, 110], [220, 57, 220, 58, 220, 59]]]

Done.
  array_insdel_3D:(5, 3, 4, 110, 220, 330) => ();

} <Array1.awl> #157 / [9]
