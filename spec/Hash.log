<Hash.awl> #19 / [1] {

  x_trace:() => 0;
  ! h_check:(hash) [2] = {
    set:(res, h_inspect:hash);
    f_put:((), " = ");
    x_trace:(2, res);
    f_put:((), "\n");
    reduce:add:res } => h_check:;
  ! h_show:(@hash) [1] = {
    f_put:((), "\n= ");
    x_trace:(2, hash);
    x_trace:(add:(2, 64), reval:hash);
    f_put:((), ".\n\n");
    } => h_show:;
  ! HashTester.init:() [0] = apply:(HashTester.fn_iterator, ! (args) [1] = set:(h_elem:(HashTester.hash, apply:(HashTester.fn_key, args)), apply:(HashTester.fn_value, args))) => HashTester.init:;
  ! HashTester.verify:() [0] = apply:(HashTester.fn_iterator, ! (args) [1] = if:(differ:(h_elem:(HashTester.hash, apply:(HashTester.fn_key, args)), apply:(HashTester.fn_value, args)), {
    f_put:((), "Hash verify error (at ");
    x_trace:(2, args);
    f_put:((), ")\n");
    })) => HashTester.verify:;
  ! HashTester.drain:() [0] = apply:(HashTester.fn_iterator, ! (args) [1] = if:(differ:(h_remove:(HashTester.hash, apply:(HashTester.fn_key, args)), apply:(HashTester.fn_value, args)), {
    f_put:((), "Hash remove error (at ");
    x_trace:(2, args);
    f_put:((), ")\n");
    })) => HashTester.drain:;
  !! HashTester:(hash fn_iterator fn_key fn_value) {4} => HashTester:;
  set:(H_1, h_create:()) => <0 / 16>;
  set:(H1_Test, HashTester:(H_1, ! (body) [3] = for_inc:(i, (10, 20), for_inc:(j, (30, 50), apply:(body, i, j))), ! (i j) [2] = (i, j), ! (i j) [2] = add:(mul:(i, 100), j))) => HashTester:{<0 / 16>, ! (body) [3] = for_inc:(i, (10, 20), for_inc:(j, (30, 50), apply:(body, i, j))), ! (i j) [2] = (i, j), ! (i j) [2] = add:(mul:(i, 100), j)};
  with:(H1_Test, HashTester.init:()) => 1949;
  with:(H1_Test, HashTester.verify:()) => ();
  h_count:H_1 => 200;
 = (20, 20, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0, 20, 20, 20, 20)
  h_check:H_1 => 200;
  h_rehash:(H_1, 25) => 200;
 = (8, 9, 9, 9, 9, 8, 8, 7, 8, 8, 8, 8, 8, 8, 7, 8, 8, 9, 9, 9, 8, 7, 7, 6, 7)
  h_check:H_1 => 200;
  h_rehash:(H_1, 8) => 200;
 = (20, 20, 20, 20, 40, 40, 20, 20)
  h_check:H_1 => 200;
  h_rehash:(H_1, 4) => 200;
 = (60, 60, 40, 40)
  h_check:H_1 => 200;
  with:(H1_Test, HashTester.verify:()) => ();

= H_1<200 / 4> = {(16, 38)::1638, (16, 43)::1643, (16, 30)::1630, (16, 44)::1644, (16, 35)::1635, (16, 49)::1649, (16, 36)::1636, (16, 41)::1641, (16, 42)::1642, (16, 33)::1633, (16, 47)::1647, (16, 34)::1634, (16, 48)::1648, (16, 39)::1639, (16, 40)::1640, (16, 31)::1631, (16, 45)::1645, (16, 32)::1632, (16, 46)::1646, (16, 37)::1637, (12, 32)::1232, (12, 46)::1246, (12, 35)::1235, (12, 49)::1249, (12, 38)::1238, (12, 41)::1241, (12, 30)::1230, (12, 44)::1244, (12, 33)::1233, (12, 47)::1247, (12, 36)::1236, (12, 39)::1239, (12, 42)::1242, (12, 31)::1231, (12, 45)::1245, (12, 34)::1234, (12, 48)::1248, (12, 37)::1237, (12, 40)::1240, (12, 43)::1243, (17, 43)::1743, (17, 30)::1730, (17, 44)::1744, (17, 35)::1735, (17, 49)::1749, (17, 36)::1736, (17, 41)::1741, (17, 42)::1742, (17, 33)::1733, (17, 47)::1747, (17, 34)::1734, (17, 48)::1748, (17, 39)::1739, (17, 40)::1740, (17, 31)::1731, (17, 45)::1745, (17, 32)::1732, (17, 46)::1746, (17, 37)::1737, (17, 38)::1738, (13, 46)::1346, (13, 35)::1335, (13, 49)::1349, (13, 38)::1338, (13, 41)::1341, (13, 30)::1330, (13, 44)::1344, (13, 33)::1333, (13, 47)::1347, (13, 36)::1336, (13, 39)::1339, (13, 42)::1342, (13, 31)::1331, (13, 45)::1345, (13, 34)::1334, (13, 48)::1348, (13, 37)::1337, (13, 40)::1340, (13, 43)::1343, (13, 32)::1332, (18, 43)::1843, (18, 30)::1830, (10, 43)::1043, (18, 44)::1844, (10, 32)::1032, (18, 35)::1835, (10, 46)::1046, (18, 49)::1849, (10, 35)::1035, (18, 36)::1836, (10, 49)::1049, (10, 38)::1038, (18, 41)::1841, (10, 41)::1041, (18, 42)::1842, (10, 30)::1030, (18, 33)::1833, (10, 44)::1044, (18, 47)::1847, (10, 33)::1033, (18, 34)::1834, (10, 47)::1047, (18, 48)::1848, (10, 36)::1036, (18, 39)::1839, (10, 39)::1039, (18, 40)::1840, (18, 31)::1831, (10, 42)::1042, (18, 45)::1845, (10, 31)::1031, (18, 32)::1832, (10, 45)::1045, (18, 46)::1846, (10, 34)::1034, (18, 37)::1837, (10, 48)::1048, (10, 37)::1037, (18, 38)::1838, (10, 40)::1040, (14, 35)::1435, (14, 49)::1449, (14, 38)::1438, (14, 41)::1441, (14, 30)::1430, (14, 44)::1444, (14, 33)::1433, (14, 47)::1447, (14, 36)::1436, (14, 39)::1439, (14, 42)::1442, (14, 31)::1431, (14, 45)::1445, (14, 34)::1434, (14, 48)::1448, (14, 37)::1437, (14, 40)::1440, (14, 43)::1443, (14, 32)::1432, (14, 46)::1446, (19, 30)::1930, (11, 43)::1143, (19, 44)::1944, (11, 32)::1132, (19, 35)::1935, (11, 46)::1146, (19, 49)::1949, (11, 35)::1135, (19, 36)::1936, (11, 49)::1149, (11, 38)::1138, (19, 41)::1941, (11, 41)::1141, (19, 42)::1942, (11, 30)::1130, (19, 33)::1933, (11, 44)::1144, (19, 47)::1947, (11, 33)::1133, (19, 34)::1934, (11, 47)::1147, (19, 48)::1948, (11, 36)::1136, (19, 39)::1939, (11, 39)::1139, (19, 40)::1940, (19, 31)::1931, (11, 42)::1142, (19, 45)::1945, (11, 31)::1131, (19, 32)::1932, (11, 45)::1145, (19, 46)::1946, (11, 34)::1134, (19, 37)::1937, (11, 48)::1148, (11, 37)::1137, (19, 38)::1938, (11, 40)::1140, (19, 43)::1943, (15, 49)::1549, (15, 38)::1538, (15, 41)::1541, (15, 30)::1530, (15, 44)::1544, (15, 33)::1533, (15, 47)::1547, (15, 36)::1536, (15, 39)::1539, (15, 42)::1542, (15, 31)::1531, (15, 45)::1545, (15, 34)::1534, (15, 48)::1548, (15, 37)::1537, (15, 40)::1540, (15, 43)::1543, (15, 32)::1532, (15, 46)::1546, (15, 35)::1535, }.

  h_show:H_1 => ();
  with:(H1_Test, HashTester.drain:()) => ();
  h_count:H_1 => 0;
  set:(H_2, h_create:()) => <0 / 16>;
  set:(H2_Test, HashTester:(H_2, ! (body) [3] = l_loop:(v, ("aa", "ee", "ii", "oo", "uu", "yy"), l_loop:(w, ("b", "c", "d", "f", "g", "k", "l", "m", "n", "p", "s", "t", "x"), apply:(body, v, w))), ! (v w) [2] = (v, w), ! (v w) [2] = s_cat:(s_cat:(s_cat:(s_cat:("{", v), "/"), w), "}"))) => HashTester:{<0 / 16>, ! (body) [3] = l_loop:(v, ("aa", "ee", "ii", "oo", "uu", "yy"), l_loop:(w, ("b", "c", "d", "f", "g", "k", "l", "m", "n", "p", "s", "t", "x"), apply:(body, v, w))), ! (v w) [2] = (v, w), ! (v w) [2] = s_cat:(s_cat:(s_cat:(s_cat:("{", v), "/"), w), "}")};
  with:(H2_Test, HashTester.init:()) => "{yy/x}";
  with:(H2_Test, HashTester.verify:()) => ();
  h_count:H_2 => 78;
 = (0, 0, 26, 0, 13, 0, 13, 0, 0, 0, 0, 0, 0, 0, 26, 0)
  h_check:H_2 => 78;
  h_rehash:(H_2, 12) => 78;
 = (3, 0, 22, 0, 4, 0, 22, 0, 6, 0, 21, 0)
  h_check:H_2 => 78;
  h_rehash:(H_2, 5) => 78;
 = (16, 21, 17, 13, 11)
  h_check:H_2 => 78;
  h_rehash:(H_2, 18) => 78;
 = (10, 0, 11, 0, 9, 0, 8, 0, 10, 0, 10, 0, 7, 0, 7, 0, 6, 0)
  h_check:H_2 => 78;
  with:(H2_Test, HashTester.verify:()) => ();

= H_2<78 / 18> = {("yy", "p")::"{yy/p}", ("aa", "c")::"{aa/c}", ("ii", "s")::"{ii/s}", ("oo", "k")::"{oo/k}", ("oo", "c")::"{oo/c}", ("yy", "l")::"{yy/l}", ("yy", "c")::"{yy/c}", ("uu", "m")::"{uu/m}", ("ii", "n")::"{ii/n}", ("aa", "b")::"{aa/b}", ("aa", "n")::"{aa/n}", ("yy", "s")::"{yy/s}", ("aa", "x")::"{aa/x}", ("oo", "p")::"{oo/p}", ("ee", "l")::"{ee/l}", ("ee", "m")::"{ee/m}", ("uu", "b")::"{uu/b}", ("ii", "g")::"{ii/g}", ("ii", "k")::"{ii/k}", ("ii", "t")::"{ii/t}", ("aa", "f")::"{aa/f}", ("aa", "t")::"{aa/t}", ("oo", "l")::"{oo/l}", ("ii", "p")::"{ii/p}", ("aa", "k")::"{aa/k}", ("aa", "p")::"{aa/p}", ("ee", "g")::"{ee/g}", ("uu", "f")::"{uu/f}", ("oo", "d")::"{oo/d}", ("ii", "b")::"{ii/b}", ("yy", "t")::"{yy/t}", ("ee", "k")::"{ee/k}", ("oo", "g")::"{oo/g}", ("oo", "n")::"{oo/n}", ("yy", "d")::"{yy/d}", ("oo", "f")::"{oo/f}", ("ii", "c")::"{ii/c}", ("ii", "f")::"{ii/f}", ("uu", "p")::"{uu/p}", ("oo", "s")::"{oo/s}", ("oo", "b")::"{oo/b}", ("ii", "l")::"{ii/l}", ("uu", "l")::"{uu/l}", ("ee", "d")::"{ee/d}", ("uu", "c")::"{uu/c}", ("yy", "b")::"{yy/b}", ("uu", "d")::"{uu/d}", ("ee", "x")::"{ee/x}", ("ee", "s")::"{ee/s}", ("aa", "d")::"{aa/d}", ("aa", "g")::"{aa/g}", ("ee", "f")::"{ee/f}", ("ee", "t")::"{ee/t}", ("yy", "g")::"{yy/g}", ("yy", "x")::"{yy/x}", ("ee", "c")::"{ee/c}", ("uu", "g")::"{uu/g}", ("aa", "s")::"{aa/s}", ("ee", "b")::"{ee/b}", ("oo", "x")::"{oo/x}", ("yy", "f")::"{yy/f}", ("uu", "k")::"{uu/k}", ("uu", "s")::"{uu/s}", ("yy", "m")::"{yy/m}", ("uu", "t")::"{uu/t}", ("oo", "m")::"{oo/m}", ("ii", "m")::"{ii/m}", ("ee", "p")::"{ee/p}", ("yy", "n")::"{yy/n}", ("aa", "l")::"{aa/l}", ("aa", "m")::"{aa/m}", ("uu", "x")::"{uu/x}", ("oo", "t")::"{oo/t}", ("ii", "d")::"{ii/d}", ("ii", "x")::"{ii/x}", ("yy", "k")::"{yy/k}", ("ee", "n")::"{ee/n}", ("uu", "n")::"{uu/n}", }.

  h_show:H_2 => ();
  with:(H2_Test, HashTester.drain:()) => ();
  h_count:H_2 => 0;
  set:(H_3, h_create:()) => <0 / 16>;
  set:(H3_Test, HashTester:(H_3, ! (body) [3] = l_loop:(p, ("abc", "de", "fg", "h", "ij", "klmn", "o", "p", "q", "rst", "uv", "xyz"), for_dec:(n, 50, apply:(body, n, p))), ! (n p) [2] = s_cat:(s_cat:(p, ":"), n), ! (n p) [2] = (add:(mul:(2, n), 1), s_cat:(s_cat:("(", p), ")"), s_cat:(s_cat:(n, "::"), p)))) => HashTester:{<0 / 16>, ! (body) [3] = l_loop:(p, ("abc", "de", "fg", "h", "ij", "klmn", "o", "p", "q", "rst", "uv", "xyz"), for_dec:(n, 50, apply:(body, n, p))), ! (n p) [2] = s_cat:(s_cat:(p, ":"), n), ! (n p) [2] = (add:(mul:(2, n), 1), s_cat:(s_cat:("(", p), ")"), s_cat:(s_cat:(n, "::"), p))};
  with:(H3_Test, HashTester.init:()) => (1, "(xyz)", "0::xyz");
  with:(H3_Test, HashTester.verify:()) => ();
  h_count:H_3 => 600;
 = (42, 30, 30, 30, 48, 24, 60, 60, 30, 30, 30, 30, 36, 36, 24, 60)
  h_check:H_3 => 600;

= H_3<600 / 16> = {"xyz:0"::(1, "(xyz)", "0::xyz"), "xyz:18"::(37, "(xyz)", "18::xyz"), "xyz:20"::(41, "(xyz)", "20::xyz"), "xyz:38"::(77, "(xyz)", "38::xyz"), "xyz:40"::(81, "(xyz)", "40::xyz"), "uv:0"::(1, "(uv)", "0::uv"), "uv:18"::(37, "(uv)", "18::uv"), "uv:20"::(41, "(uv)", "20::uv"), "uv:38"::(77, "(uv)", "38::uv"), "uv:40"::(81, "(uv)", "40::uv"), "rst:0"::(1, "(rst)", "0::rst"), "rst:18"::(37, "(rst)", "18::rst"), "rst:20"::(41, "(rst)", "20::rst"), "rst:38"::(77, "(rst)", "38::rst"), "rst:40"::(81, "(rst)", "40::rst"), "q:0"::(1, "(q)", "0::q"), "q:18"::(37, "(q)", "18::q"), "q:20"::(41, "(q)", "20::q"), "q:38"::(77, "(q)", "38::q"), "q:40"::(81, "(q)", "40::q"), "p:0"::(1, "(p)", "0::p"), "p:18"::(37, "(p)", "18::p"), "p:20"::(41, "(p)", "20::p"), "p:38"::(77, "(p)", "38::p"), "p:40"::(81, "(p)", "40::p"), "o:0"::(1, "(o)", "0::o"), "o:18"::(37, "(o)", "18::o"), "o:20"::(41, "(o)", "20::o"), "o:38"::(77, "(o)", "38::o"), "o:40"::(81, "(o)", "40::o"), "klmn:0"::(1, "(klmn)", "0::klmn"), "klmn:18"::(37, "(klmn)", "18::klmn"), "klmn:20"::(41, "(klmn)", "20::klmn"), "klmn:38"::(77, "(klmn)", "38::klmn"), "klmn:40"::(81, "(klmn)", "40::klmn"), "ij:0"::(1, "(ij)", "0::ij"), "ij:18"::(37, "(ij)", "18::ij"), "ij:20"::(41, "(ij)", "20::ij"), "ij:38"::(77, "(ij)", "38::ij"), "ij:40"::(81, "(ij)", "40::ij"), "h:0"::(1, "(h)", "0::h"), "h:18"::(37, "(h)", "18::h"), "h:20"::(41, "(h)", "20::h"), "h:38"::(77, "(h)", "38::h"), "h:40"::(81, "(h)", "40::h"), "fg:0"::(1, "(fg)", "0::fg"), "fg:18"::(37, "(fg)", "18::fg"), "fg:20"::(41, "(fg)", "20::fg"), "fg:38"::(77, "(fg)", "38::fg"), "fg:40"::(81, "(fg)", "40::fg"), "de:0"::(1, "(de)", "0::de"), "de:18"::(37, "(de)", "18::de"), "de:20"::(41, "(de)", "20::de"), "de:38"::(77, "(de)", "38::de"), "de:40"::(81, "(de)", "40::de"), "abc:0"::(1, "(abc)", "0::abc"), "abc:18"::(37, "(abc)", "18::abc"), "abc:20"::(41, "(abc)", "20::abc"), "abc:38"::(77, "(abc)", "38::abc"), "abc:40"::(81, "(abc)", "40::abc"), "xyz:19"::(39, "(xyz)", "19::xyz"), "xyz:39"::(79, "(xyz)", "39::xyz"), "uv:19"::(39, "(uv)", "19::uv"), "uv:39"::(79, "(uv)", "39::uv"), "rst:19"::(39, "(rst)", "19::rst"), "rst:39"::(79, "(rst)", "39::rst"), "q:19"::(39, "(q)", "19::q"), "q:39"::(79, "(q)", "39::q"), "p:19"::(39, "(p)", "19::p"), "p:39"::(79, "(p)", "39::p"), "o:19"::(39, "(o)", "19::o"), "o:39"::(79, "(o)", "39::o"), "klmn:19"::(39, "(klmn)", "19::klmn"), "klmn:39"::(79, "(klmn)", "39::klmn"), "ij:19"::(39, "(ij)", "19::ij"), "ij:39"::(79, "(ij)", "39::ij"), "h:19"::(39, "(h)", "19::h"), "h:39"::(79, "(h)", "39::h"), "fg:19"::(39, "(fg)", "19::fg"), "fg:39"::(79, "(fg)", "39::fg"), "de:19"::(39, "(de)", "19::de"), "de:39"::(79, "(de)", "39::de"), "abc:19"::(39, "(abc)", "19::abc"), "abc:39"::(79, "(abc)", "39::abc"), "xyz:2"::(5, "(xyz)", "2::xyz"), "xyz:22"::(45, "(xyz)", "22::xyz"), "xyz:36"::(73, "(xyz)", "36::xyz"), "uv:2"::(5, "(uv)", "2::uv"), "uv:22"::(45, "(uv)", "22::uv"), "uv:36"::(73, "(uv)", "36::uv"), "rst:2"::(5, "(rst)", "2::rst"), "rst:22"::(45, "(rst)", "22::rst"), "rst:36"::(73, "(rst)", "36::rst"), "q:2"::(5, "(q)", "2::q"), "q:22"::(45, "(q)", "22::q"), "q:36"::(73, "(q)", "36::q"), "p:2"::(5, "(p)", "2::p"), "p:22"::(45, "(p)", "22::p"), "p:36"::(73, "(p)", "36::p"), "o:2"::(5, "(o)", "2::o"), "o:22"::(45, "(o)", "22::o"), "o:36"::(73, "(o)", "36::o"), "klmn:2"::(5, "(klmn)", "2::klmn"), "klmn:22"::(45, "(klmn)", "22::klmn"), "klmn:36"::(73, "(klmn)", "36::klmn"), "ij:2"::(5, "(ij)", "2::ij"), "ij:22"::(45, "(ij)", "22::ij"), "ij:36"::(73, "(ij)", "36::ij"), "h:2"::(5, "(h)", "2::h"), "h:22"::(45, "(h)", "22::h"), "h:36"::(73, "(h)", "36::h"), "fg:2"::(5, "(fg)", "2::fg"), "fg:22"::(45, "(fg)", "22::fg"), "fg:36"::(73, "(fg)", "36::fg"), "de:2"::(5, "(de)", "2::de"), "de:22"::(45, "(de)", "22::de"), "de:36"::(73, "(de)", "36::de"), "abc:2"::(5, "(abc)", "2::abc"), "abc:22"::(45, "(abc)", "22::abc"), "abc:36"::(73, "(abc)", "36::abc"), "xyz:1"::(3, "(xyz)", "1::xyz"), "xyz:21"::(43, "(xyz)", "21::xyz"), "xyz:37"::(75, "(xyz)", "37::xyz"), "uv:1"::(3, "(uv)", "1::uv"), "uv:21"::(43, "(uv)", "21::uv"), "uv:37"::(75, "(uv)", "37::uv"), "rst:1"::(3, "(rst)", "1::rst"), "rst:21"::(43, "(rst)", "21::rst"), "rst:37"::(75, "(rst)", "37::rst"), "q:1"::(3, "(q)", "1::q"), "q:21"::(43, "(q)", "21::q"), "q:37"::(75, "(q)", "37::q"), "p:1"::(3, "(p)", "1::p"), "p:21"::(43, "(p)", "21::p"), "p:37"::(75, "(p)", "37::p"), "o:1"::(3, "(o)", "1::o"), "o:21"::(43, "(o)", "21::o"), "o:37"::(75, "(o)", "37::o"), "klmn:1"::(3, "(klmn)", "1::klmn"), "klmn:21"::(43, "(klmn)", "21::klmn"), "klmn:37"::(75, "(klmn)", "37::klmn"), "ij:1"::(3, "(ij)", "1::ij"), "ij:21"::(43, "(ij)", "21::ij"), "ij:37"::(75, "(ij)", "37::ij"), "h:1"::(3, "(h)", "1::h"), "h:21"::(43, "(h)", "21::h"), "h:37"::(75, "(h)", "37::h"), "fg:1"::(3, "(fg)", "1::fg"), "fg:21"::(43, "(fg)", "21::fg"), "fg:37"::(75, "(fg)", "37::fg"), "de:1"::(3, "(de)", "1::de"), "de:21"::(43, "(de)", "21::de"), "de:37"::(75, "(de)", "37::de"), "abc:1"::(3, "(abc)", "1::abc"), "abc:21"::(43, "(abc)", "21::abc"), "abc:37"::(75, "(abc)", "37::abc"), "xyz:14"::(29, "(xyz)", "14::xyz"), "xyz:44"::(89, "(xyz)", "44::xyz"), "uv:14"::(29, "(uv)", "14::uv"), "uv:44"::(89, "(uv)", "44::uv"), "rst:4"::(9, "(rst)", "4::rst"), "rst:14"::(29, "(rst)", "14::rst"), "rst:44"::(89, "(rst)", "44::rst"), "q:4"::(9, "(q)", "4::q"), "q:14"::(29, "(q)", "14::q"), "q:44"::(89, "(q)", "44::q"), "p:4"::(9, "(p)", "4::p"), "p:14"::(29, "(p)", "14::p"), "p:44"::(89, "(p)", "44::p"), "o:14"::(29, "(o)", "14::o"), "o:44"::(89, "(o)", "44::o"), "klmn:14"::(29, "(klmn)", "14::klmn"), "klmn:44"::(89, "(klmn)", "44::klmn"), "ij:14"::(29, "(ij)", "14::ij"), "ij:44"::(89, "(ij)", "44::ij"), "h:4"::(9, "(h)", "4::h"), "h:14"::(29, "(h)", "14::h"), "h:44"::(89, "(h)", "44::h"), "fg:4"::(9, "(fg)", "4::fg"), "fg:14"::(29, "(fg)", "14::fg"), "fg:44"::(89, "(fg)", "44::fg"), "de:14"::(29, "(de)", "14::de"), "de:44"::(89, "(de)", "44::de"), "abc:4"::(9, "(abc)", "4::abc"), "abc:14"::(29, "(abc)", "14::abc"), "abc:44"::(89, "(abc)", "44::abc"), "xyz:15"::(31, "(xyz)", "15::xyz"), "xyz:43"::(87, "(xyz)", "43::xyz"), "uv:15"::(31, "(uv)", "15::uv"), "uv:43"::(87, "(uv)", "43::uv"), "rst:3"::(7, "(rst)", "3::rst"), "rst:15"::(31, "(rst)", "15::rst"), "rst:43"::(87, "(rst)", "43::rst"), "q:3"::(7, "(q)", "3::q"), "q:15"::(31, "(q)", "15::q"), "q:43"::(87, "(q)", "43::q"), "p:3"::(7, "(p)", "3::p"), "p:15"::(31, "(p)", "15::p"), "p:43"::(87, "(p)", "43::p"), "o:15"::(31, "(o)", "15::o"), "o:43"::(87, "(o)", "43::o"), "klmn:15"::(31, "(klmn)", "15::klmn"), "klmn:43"::(87, "(klmn)", "43::klmn"), "ij:15"::(31, "(ij)", "15::ij"), "ij:43"::(87, "(ij)", "43::ij"), "h:3"::(7, "(h)", "3::h"), "h:15"::(31, "(h)", "15::h"), "h:43"::(87, "(h)", "43::h"), "fg:3"::(7, "(fg)", "3::fg"), "fg:15"::(31, "(fg)", "15::fg"), "fg:43"::(87, "(fg)", "43::fg"), "de:15"::(31, "(de)", "15::de"), "de:43"::(87, "(de)", "43::de"), "abc:3"::(7, "(abc)", "3::abc"), "abc:15"::(31, "(abc)", "15::abc"), "abc:43"::(87, "(abc)", "43::abc"), "xyz:16"::(33, "(xyz)", "16::xyz"), "xyz:42"::(85, "(xyz)", "42::xyz"), "uv:16"::(33, "(uv)", "16::uv"), "uv:42"::(85, "(uv)", "42::uv"), "rst:6"::(13, "(rst)", "6::rst"), "rst:16"::(33, "(rst)", "16::rst"), "rst:42"::(85, "(rst)", "42::rst"), "q:6"::(13, "(q)", "6::q"), "q:16"::(33, "(q)", "16::q"), "q:42"::(85, "(q)", "42::q"), "p:6"::(13, "(p)", "6::p"), "p:16"::(33, "(p)", "16::p"), "p:42"::(85, "(p)", "42::p"), "o:16"::(33, "(o)", "16::o"), "o:42"::(85, "(o)", "42::o"), "klmn:16"::(33, "(klmn)", "16::klmn"), "klmn:42"::(85, "(klmn)", "42::klmn"), "ij:16"::(33, "(ij)", "16::ij"), "ij:42"::(85, "(ij)", "42::ij"), "h:6"::(13, "(h)", "6::h"), "h:16"::(33, "(h)", "16::h"), "h:42"::(85, "(h)", "42::h"), "fg:6"::(13, "(fg)", "6::fg"), "fg:16"::(33, "(fg)", "16::fg"), "fg:42"::(85, "(fg)", "42::fg"), "de:16"::(33, "(de)", "16::de"), "de:42"::(85, "(de)", "42::de"), "abc:6"::(13, "(abc)", "6::abc"), "abc:16"::(33, "(abc)", "16::abc"), "abc:42"::(85, "(abc)", "42::abc"), "xyz:17"::(35, "(xyz)", "17::xyz"), "xyz:41"::(83, "(xyz)", "41::xyz"), "uv:17"::(35, "(uv)", "17::uv"), "uv:41"::(83, "(uv)", "41::uv"), "rst:5"::(11, "(rst)", "5::rst"), "rst:17"::(35, "(rst)", "17::rst"), "rst:41"::(83, "(rst)", "41::rst"), "q:5"::(11, "(q)", "5::q"), "q:17"::(35, "(q)", "17::q"), "q:41"::(83, "(q)", "41::q"), "p:5"::(11, "(p)", "5::p"), "p:17"::(35, "(p)", "17::p"), "p:41"::(83, "(p)", "41::p"), "o:17"::(35, "(o)", "17::o"), "o:41"::(83, "(o)", "41::o"), "klmn:17"::(35, "(klmn)", "17::klmn"), "klmn:41"::(83, "(klmn)", "41::klmn"), "ij:17"::(35, "(ij)", "17::ij"), "ij:41"::(83, "(ij)", "41::ij"), "h:5"::(11, "(h)", "5::h"), "h:17"::(35, "(h)", "17::h"), "h:41"::(83, "(h)", "41::h"), "fg:5"::(11, "(fg)", "5::fg"), "fg:17"::(35, "(fg)", "17::fg"), "fg:41"::(83, "(fg)", "41::fg"), "de:17"::(35, "(de)", "17::de"), "de:41"::(83, "(de)", "41::de"), "abc:5"::(11, "(abc)", "5::abc"), "abc:17"::(35, "(abc)", "17::abc"), "abc:41"::(83, "(abc)", "41::abc"), "xyz:8"::(17, "(xyz)", "8::xyz"), "xyz:10"::(21, "(xyz)", "10::xyz"), "xyz:28"::(57, "(xyz)", "28::xyz"), "xyz:30"::(61, "(xyz)", "30::xyz"), "xyz:48"::(97, "(xyz)", "48::xyz"), "uv:8"::(17, "(uv)", "8::uv"), "uv:10"::(21, "(uv)", "10::uv"), "uv:28"::(57, "(uv)", "28::uv"), "uv:30"::(61, "(uv)", "30::uv"), "uv:48"::(97, "(uv)", "48::uv"), "rst:8"::(17, "(rst)", "8::rst"), "rst:10"::(21, "(rst)", "10::rst"), "rst:28"::(57, "(rst)", "28::rst"), "rst:30"::(61, "(rst)", "30::rst"), "rst:48"::(97, "(rst)", "48::rst"), "q:8"::(17, "(q)", "8::q"), "q:10"::(21, "(q)", "10::q"), "q:28"::(57, "(q)", "28::q"), "q:30"::(61, "(q)", "30::q"), "q:48"::(97, "(q)", "48::q"), "p:8"::(17, "(p)", "8::p"), "p:10"::(21, "(p)", "10::p"), "p:28"::(57, "(p)", "28::p"), "p:30"::(61, "(p)", "30::p"), "p:48"::(97, "(p)", "48::p"), "o:8"::(17, "(o)", "8::o"), "o:10"::(21, "(o)", "10::o"), "o:28"::(57, "(o)", "28::o"), "o:30"::(61, "(o)", "30::o"), "o:48"::(97, "(o)", "48::o"), "klmn:8"::(17, "(klmn)", "8::klmn"), "klmn:10"::(21, "(klmn)", "10::klmn"), "klmn:28"::(57, "(klmn)", "28::klmn"), "klmn:30"::(61, "(klmn)", "30::klmn"), "klmn:48"::(97, "(klmn)", "48::klmn"), "ij:8"::(17, "(ij)", "8::ij"), "ij:10"::(21, "(ij)", "10::ij"), "ij:28"::(57, "(ij)", "28::ij"), "ij:30"::(61, "(ij)", "30::ij"), "ij:48"::(97, "(ij)", "48::ij"), "h:8"::(17, "(h)", "8::h"), "h:10"::(21, "(h)", "10::h"), "h:28"::(57, "(h)", "28::h"), "h:30"::(61, "(h)", "30::h"), "h:48"::(97, "(h)", "48::h"), "fg:8"::(17, "(fg)", "8::fg"), "fg:10"::(21, "(fg)", "10::fg"), "fg:28"::(57, "(fg)", "28::fg"), "fg:30"::(61, "(fg)", "30::fg"), "fg:48"::(97, "(fg)", "48::fg"), "de:8"::(17, "(de)", "8::de"), "de:10"::(21, "(de)", "10::de"), "de:28"::(57, "(de)", "28::de"), "de:30"::(61, "(de)", "30::de"), "de:48"::(97, "(de)", "48::de"), "abc:8"::(17, "(abc)", "8::abc"), "abc:10"::(21, "(abc)", "10::abc"), "abc:28"::(57, "(abc)", "28::abc"), "abc:30"::(61, "(abc)", "30::abc"), "abc:48"::(97, "(abc)", "48::abc"), "xyz:7"::(15, "(xyz)", "7::xyz"), "xyz:11"::(23, "(xyz)", "11::xyz"), "xyz:27"::(55, "(xyz)", "27::xyz"), "xyz:31"::(63, "(xyz)", "31::xyz"), "xyz:47"::(95, "(xyz)", "47::xyz"), "uv:7"::(15, "(uv)", "7::uv"), "uv:11"::(23, "(uv)", "11::uv"), "uv:27"::(55, "(uv)", "27::uv"), "uv:31"::(63, "(uv)", "31::uv"), "uv:47"::(95, "(uv)", "47::uv"), "rst:7"::(15, "(rst)", "7::rst"), "rst:11"::(23, "(rst)", "11::rst"), "rst:27"::(55, "(rst)", "27::rst"), "rst:31"::(63, "(rst)", "31::rst"), "rst:47"::(95, "(rst)", "47::rst"), "q:7"::(15, "(q)", "7::q"), "q:11"::(23, "(q)", "11::q"), "q:27"::(55, "(q)", "27::q"), "q:31"::(63, "(q)", "31::q"), "q:47"::(95, "(q)", "47::q"), "p:7"::(15, "(p)", "7::p"), "p:11"::(23, "(p)", "11::p"), "p:27"::(55, "(p)", "27::p"), "p:31"::(63, "(p)", "31::p"), "p:47"::(95, "(p)", "47::p"), "o:7"::(15, "(o)", "7::o"), "o:11"::(23, "(o)", "11::o"), "o:27"::(55, "(o)", "27::o"), "o:31"::(63, "(o)", "31::o"), "o:47"::(95, "(o)", "47::o"), "klmn:7"::(15, "(klmn)", "7::klmn"), "klmn:11"::(23, "(klmn)", "11::klmn"), "klmn:27"::(55, "(klmn)", "27::klmn"), "klmn:31"::(63, "(klmn)", "31::klmn"), "klmn:47"::(95, "(klmn)", "47::klmn"), "ij:7"::(15, "(ij)", "7::ij"), "ij:11"::(23, "(ij)", "11::ij"), "ij:27"::(55, "(ij)", "27::ij"), "ij:31"::(63, "(ij)", "31::ij"), "ij:47"::(95, "(ij)", "47::ij"), "h:7"::(15, "(h)", "7::h"), "h:11"::(23, "(h)", "11::h"), "h:27"::(55, "(h)", "27::h"), "h:31"::(63, "(h)", "31::h"), "h:47"::(95, "(h)", "47::h"), "fg:7"::(15, "(fg)", "7::fg"), "fg:11"::(23, "(fg)", "11::fg"), "fg:27"::(55, "(fg)", "27::fg"), "fg:31"::(63, "(fg)", "31::fg"), "fg:47"::(95, "(fg)", "47::fg"), "de:7"::(15, "(de)", "7::de"), "de:11"::(23, "(de)", "11::de"), "de:27"::(55, "(de)", "27::de"), "de:31"::(63, "(de)", "31::de"), "de:47"::(95, "(de)", "47::de"), "abc:7"::(15, "(abc)", "7::abc"), "abc:11"::(23, "(abc)", "11::abc"), "abc:27"::(55, "(abc)", "27::abc"), "abc:31"::(63, "(abc)", "31::abc"), "abc:47"::(95, "(abc)", "47::abc"), "xyz:12"::(25, "(xyz)", "12::xyz"), "xyz:46"::(93, "(xyz)", "46::xyz"), "uv:12"::(25, "(uv)", "12::uv"), "uv:46"::(93, "(uv)", "46::uv"), "rst:12"::(25, "(rst)", "12::rst"), "rst:46"::(93, "(rst)", "46::rst"), "q:12"::(25, "(q)", "12::q"), "q:46"::(93, "(q)", "46::q"), "p:12"::(25, "(p)", "12::p"), "p:46"::(93, "(p)", "46::p"), "o:12"::(25, "(o)", "12::o"), "o:46"::(93, "(o)", "46::o"), "klmn:12"::(25, "(klmn)", "12::klmn"), "klmn:46"::(93, "(klmn)", "46::klmn"), "ij:12"::(25, "(ij)", "12::ij"), "ij:46"::(93, "(ij)", "46::ij"), "h:12"::(25, "(h)", "12::h"), "h:46"::(93, "(h)", "46::h"), "fg:12"::(25, "(fg)", "12::fg"), "fg:46"::(93, "(fg)", "46::fg"), "de:12"::(25, "(de)", "12::de"), "de:46"::(93, "(de)", "46::de"), "abc:12"::(25, "(abc)", "12::abc"), "abc:46"::(93, "(abc)", "46::abc"), "xyz:9"::(19, "(xyz)", "9::xyz"), "xyz:13"::(27, "(xyz)", "13::xyz"), "xyz:29"::(59, "(xyz)", "29::xyz"), "xyz:45"::(91, "(xyz)", "45::xyz"), "uv:9"::(19, "(uv)", "9::uv"), "uv:13"::(27, "(uv)", "13::uv"), "uv:29"::(59, "(uv)", "29::uv"), "uv:45"::(91, "(uv)", "45::uv"), "rst:9"::(19, "(rst)", "9::rst"), "rst:13"::(27, "(rst)", "13::rst"), "rst:29"::(59, "(rst)", "29::rst"), "rst:45"::(91, "(rst)", "45::rst"), "q:9"::(19, "(q)", "9::q"), "q:13"::(27, "(q)", "13::q"), "q:29"::(59, "(q)", "29::q"), "q:45"::(91, "(q)", "45::q"), "p:9"::(19, "(p)", "9::p"), "p:13"::(27, "(p)", "13::p"), "p:29"::(59, "(p)", "29::p"), "p:45"::(91, "(p)", "45::p"), "o:9"::(19, "(o)", "9::o"), "o:13"::(27, "(o)", "13::o"), "o:29"::(59, "(o)", "29::o"), "o:45"::(91, "(o)", "45::o"), "klmn:9"::(19, "(klmn)", "9::klmn"), "klmn:13"::(27, "(klmn)", "13::klmn"), "klmn:29"::(59, "(klmn)", "29::klmn"), "klmn:45"::(91, "(klmn)", "45::klmn"), "ij:9"::(19, "(ij)", "9::ij"), "ij:13"::(27, "(ij)", "13::ij"), "ij:29"::(59, "(ij)", "29::ij"), "ij:45"::(91, "(ij)", "45::ij"), "h:9"::(19, "(h)", "9::h"), "h:13"::(27, "(h)", "13::h"), "h:29"::(59, "(h)", "29::h"), "h:45"::(91, "(h)", "45::h"), "fg:9"::(19, "(fg)", "9::fg"), "fg:13"::(27, "(fg)", "13::fg"), "fg:29"::(59, "(fg)", "29::fg"), "fg:45"::(91, "(fg)", "45::fg"), "de:9"::(19, "(de)", "9::de"), "de:13"::(27, "(de)", "13::de"), "de:29"::(59, "(de)", "29::de"), "de:45"::(91, "(de)", "45::de"), "abc:9"::(19, "(abc)", "9::abc"), "abc:13"::(27, "(abc)", "13::abc"), "abc:29"::(59, "(abc)", "29::abc"), "abc:45"::(91, "(abc)", "45::abc"), "xyz:4"::(9, "(xyz)", "4::xyz"), "xyz:24"::(49, "(xyz)", "24::xyz"), "xyz:34"::(69, "(xyz)", "34::xyz"), "uv:4"::(9, "(uv)", "4::uv"), "uv:24"::(49, "(uv)", "24::uv"), "uv:34"::(69, "(uv)", "34::uv"), "rst:24"::(49, "(rst)", "24::rst"), "rst:34"::(69, "(rst)", "34::rst"), "q:24"::(49, "(q)", "24::q"), "q:34"::(69, "(q)", "34::q"), "p:24"::(49, "(p)", "24::p"), "p:34"::(69, "(p)", "34::p"), "o:4"::(9, "(o)", "4::o"), "o:24"::(49, "(o)", "24::o"), "o:34"::(69, "(o)", "34::o"), "klmn:4"::(9, "(klmn)", "4::klmn"), "klmn:24"::(49, "(klmn)", "24::klmn"), "klmn:34"::(69, "(klmn)", "34::klmn"), "ij:4"::(9, "(ij)", "4::ij"), "ij:24"::(49, "(ij)", "24::ij"), "ij:34"::(69, "(ij)", "34::ij"), "h:24"::(49, "(h)", "24::h"), "h:34"::(69, "(h)", "34::h"), "fg:24"::(49, "(fg)", "24::fg"), "fg:34"::(69, "(fg)", "34::fg"), "de:4"::(9, "(de)", "4::de"), "de:24"::(49, "(de)", "24::de"), "de:34"::(69, "(de)", "34::de"), "abc:24"::(49, "(abc)", "24::abc"), "abc:34"::(69, "(abc)", "34::abc"), "xyz:3"::(7, "(xyz)", "3::xyz"), "xyz:23"::(47, "(xyz)", "23::xyz"), "xyz:35"::(71, "(xyz)", "35::xyz"), "uv:3"::(7, "(uv)", "3::uv"), "uv:23"::(47, "(uv)", "23::uv"), "uv:35"::(71, "(uv)", "35::uv"), "rst:23"::(47, "(rst)", "23::rst"), "rst:35"::(71, "(rst)", "35::rst"), "q:23"::(47, "(q)", "23::q"), "q:35"::(71, "(q)", "35::q"), "p:23"::(47, "(p)", "23::p"), "p:35"::(71, "(p)", "35::p"), "o:3"::(7, "(o)", "3::o"), "o:23"::(47, "(o)", "23::o"), "o:35"::(71, "(o)", "35::o"), "klmn:3"::(7, "(klmn)", "3::klmn"), "klmn:23"::(47, "(klmn)", "23::klmn"), "klmn:35"::(71, "(klmn)", "35::klmn"), "ij:3"::(7, "(ij)", "3::ij"), "ij:23"::(47, "(ij)", "23::ij"), "ij:35"::(71, "(ij)", "35::ij"), "h:23"::(47, "(h)", "23::h"), "h:35"::(71, "(h)", "35::h"), "fg:23"::(47, "(fg)", "23::fg"), "fg:35"::(71, "(fg)", "35::fg"), "de:3"::(7, "(de)", "3::de"), "de:23"::(47, "(de)", "23::de"), "de:35"::(71, "(de)", "35::de"), "abc:23"::(47, "(abc)", "23::abc"), "abc:35"::(71, "(abc)", "35::abc"), "xyz:6"::(13, "(xyz)", "6::xyz"), "xyz:26"::(53, "(xyz)", "26::xyz"), "xyz:32"::(65, "(xyz)", "32::xyz"), "uv:6"::(13, "(uv)", "6::uv"), "uv:26"::(53, "(uv)", "26::uv"), "uv:32"::(65, "(uv)", "32::uv"), "rst:26"::(53, "(rst)", "26::rst"), "rst:32"::(65, "(rst)", "32::rst"), "q:26"::(53, "(q)", "26::q"), "q:32"::(65, "(q)", "32::q"), "p:26"::(53, "(p)", "26::p"), "p:32"::(65, "(p)", "32::p"), "o:6"::(13, "(o)", "6::o"), "o:26"::(53, "(o)", "26::o"), "o:32"::(65, "(o)", "32::o"), "klmn:6"::(13, "(klmn)", "6::klmn"), "klmn:26"::(53, "(klmn)", "26::klmn"), "klmn:32"::(65, "(klmn)", "32::klmn"), "ij:6"::(13, "(ij)", "6::ij"), "ij:26"::(53, "(ij)", "26::ij"), "ij:32"::(65, "(ij)", "32::ij"), "h:26"::(53, "(h)", "26::h"), "h:32"::(65, "(h)", "32::h"), "fg:26"::(53, "(fg)", "26::fg"), "fg:32"::(65, "(fg)", "32::fg"), "de:6"::(13, "(de)", "6::de"), "de:26"::(53, "(de)", "26::de"), "de:32"::(65, "(de)", "32::de"), "abc:26"::(53, "(abc)", "26::abc"), "abc:32"::(65, "(abc)", "32::abc"), "xyz:5"::(11, "(xyz)", "5::xyz"), "xyz:25"::(51, "(xyz)", "25::xyz"), "xyz:33"::(67, "(xyz)", "33::xyz"), "xyz:49"::(99, "(xyz)", "49::xyz"), "uv:5"::(11, "(uv)", "5::uv"), "uv:25"::(51, "(uv)", "25::uv"), "uv:33"::(67, "(uv)", "33::uv"), "uv:49"::(99, "(uv)", "49::uv"), "rst:25"::(51, "(rst)", "25::rst"), "rst:33"::(67, "(rst)", "33::rst"), "rst:49"::(99, "(rst)", "49::rst"), "q:25"::(51, "(q)", "25::q"), "q:33"::(67, "(q)", "33::q"), "q:49"::(99, "(q)", "49::q"), "p:25"::(51, "(p)", "25::p"), "p:33"::(67, "(p)", "33::p"), "p:49"::(99, "(p)", "49::p"), "o:5"::(11, "(o)", "5::o"), "o:25"::(51, "(o)", "25::o"), "o:33"::(67, "(o)", "33::o"), "o:49"::(99, "(o)", "49::o"), "klmn:5"::(11, "(klmn)", "5::klmn"), "klmn:25"::(51, "(klmn)", "25::klmn"), "klmn:33"::(67, "(klmn)", "33::klmn"), "klmn:49"::(99, "(klmn)", "49::klmn"), "ij:5"::(11, "(ij)", "5::ij"), "ij:25"::(51, "(ij)", "25::ij"), "ij:33"::(67, "(ij)", "33::ij"), "ij:49"::(99, "(ij)", "49::ij"), "h:25"::(51, "(h)", "25::h"), "h:33"::(67, "(h)", "33::h"), "h:49"::(99, "(h)", "49::h"), "fg:25"::(51, "(fg)", "25::fg"), "fg:33"::(67, "(fg)", "33::fg"), "fg:49"::(99, "(fg)", "49::fg"), "de:5"::(11, "(de)", "5::de"), "de:25"::(51, "(de)", "25::de"), "de:33"::(67, "(de)", "33::de"), "de:49"::(99, "(de)", "49::de"), "abc:25"::(51, "(abc)", "25::abc"), "abc:33"::(67, "(abc)", "33::abc"), "abc:49"::(99, "(abc)", "49::abc"), }.

  h_show:H_3 => ();
  with:(H3_Test, HashTester.drain:()) => ();
  h_count:H_3 => 0;

} <Hash.awl> #164 / [48]
