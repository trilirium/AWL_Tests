
`
	"ListSort.awl":
	Testing "pure functional" list sorting
`

`
	CHECKED: l_len, l_cat, l_rep, l_rev, l_filter_in, l_count_in
`

`	WARNING: output is not predictable `

x_trace ();

` permute list in random order `
! list_shuffle (list) : [n m] =
	for_dec (n, 1..#list, {
		m = rand (n + 1);
		list[m] :=: list[n];
		});


randomize ();

! list_qsort (list) : [pivot] =
    #list < 2 ? list :
    #list == 2 ?
	(list[0] <= list[1] ? list : [~] list) :
    {
	pivot = list [#list % 2];

	list_qsort (l_filter_in (!(elem) = (elem < pivot), list))
	    [+]
	pivot [*] l_count_in (!(elem) = (elem == pivot), list)
	    [+]
	list_qsort (l_filter_in (!(elem) = (elem > pivot), list))
    };

aa = [1 2 3 4 5 6 7 8 9 8 7 6 5 4 3 2 1];
list_shuffle (aa);
aa;
list_qsort (aa);

! list_qsort_alpha (list) : [pivot] =
    #list < 2 ? list :
    #list == 2 ?
	(list[0] <=$ list[1] ? list : [~] list) :
    {
	pivot = list [#list % 2];

	list_qsort_alpha (l_filter_in (!(elem) = (elem <$ pivot), list))
	    [+]
	pivot [*] l_count_in (!(elem) = (elem ==$ pivot), list)
	    [+]
	list_qsort_alpha (l_filter_in (!(elem) = (elem >$ pivot), list))
    };


bb = [	'aaaa' 'abbb' 'abcc' 'abcd'
	'eeee' 'efff' 'efgg' 'efgh'
	'iiii' 'ijjj' 'ijkk' 'ijkl'
	'mmmm' 'mnnn' 'mnoo' 'mnop'
	];

list_shuffle (bb);
bb;
list_qsort_alpha (bb);

