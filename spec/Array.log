<Array.awl> #17 / [1] {

  x_trace:() => 0;
  ! check_array:(array f_init) [2] = {
    ! check_dimension:(l_index l_dims) [3] = {
      if:(l_len:l_dims, {
	l_pop:(l_dims, n);
	set:(l_index, l_cat:(l_index, 0));
	for_inc:(reval:if:(gt:(l_len:l_index, 1), deval:l_item:(sub:(l_len:l_index, 1), l_index), deval:l_index), n, check_array.check_dimension:(l_index, l_dims)) }, if:(differ:(a_elem:(check_array.array, l_index), apply:(check_array.f_init, l_index)), {
	f_put:((), "Failed at: ");
	x_trace:(2, l_index);
	f_put:((), "\n");
	}));
      };
    set:(.dims, a_dims:array);
    check_dimension:((), .dims);
    } => check_array:;
  set:(aa, array:(3, 5)) => [3 5];
  ! fn_aa:(a b) [2] = add:(mul:(a, 10), b) => fn_aa:;
  a_init_all:(aa, fn_aa:) => ();
  check_array:(aa, fn_aa:) => ();
  a_save:aa => (0, 1, 2, 3, 4, 10, 11, 12, 13, 14, 20, 21, 22, 23, 24);
  set:(bb, array:(4, 3, 2)) => [4 3 2];
  ! fn_bb:(a b c) [3] = add:(add:(mul:(a, 100), mul:(b, 10)), c) => fn_bb:;
  a_init_all:(bb, fn_bb:) => ();
  check_array:(bb, fn_bb:) => ();
  a_save:bb => (0, 1, 10, 11, 20, 21, 100, 101, 110, 111, 120, 121, 200, 201, 210, 211, 220, 221, 300, 301, 310, 311, 320, 321);
  set:(cc, array:(3, 4, 5)) => [3 4 5];
  ! fn_cc:(s t u) [3] = s_cat:(s_cat:(s_cat:(s_cat:(s_cat:(s_cat:("{", s), ":"), t), ":"), u), "}") => fn_cc:;
  a_init_all:(cc, fn_cc:) => ();
  check_array:(cc, fn_cc:) => ();
  a_save:cc => ("{0:0:0}", "{0:0:1}", "{0:0:2}", "{0:0:3}", "{0:0:4}", "{0:1:0}", "{0:1:1}", "{0:1:2}", "{0:1:3}", "{0:1:4}", "{0:2:0}", "{0:2:1}", "{0:2:2}", "{0:2:3}", "{0:2:4}", "{0:3:0}", "{0:3:1}", "{0:3:2}", "{0:3:3}", "{0:3:4}", "{1:0:0}", "{1:0:1}", "{1:0:2}", "{1:0:3}", "{1:0:4}", "{1:1:0}", "{1:1:1}", "{1:1:2}", "{1:1:3}", "{1:1:4}", "{1:2:0}", "{1:2:1}", "{1:2:2}", "{1:2:3}", "{1:2:4}", "{1:3:0}", "{1:3:1}", "{1:3:2}", "{1:3:3}", "{1:3:4}", "{2:0:0}", "{2:0:1}", "{2:0:2}", "{2:0:3}", "{2:0:4}", "{2:1:0}", "{2:1:1}", "{2:1:2}", "{2:1:3}", "{2:1:4}", "{2:2:0}", "{2:2:1}", "{2:2:2}", "{2:2:3}", "{2:2:4}", "{2:3:0}", "{2:3:1}", "{2:3:2}", "{2:3:3}", "{2:3:4}");
  set:(dd, array:(5, 4, 3)) => [5 4 3];
  ! fn_dd:(x y z) [3] = add:(mul:(add:(mul:(x, 4), y), 3), z) => fn_dd:;
  a_init_all:(dd, fn_dd:) => ();
  check_array:(dd, fn_dd:) => ();
  ident:(a_save:dd, l_range:(mul:(mul:(5, 4), 3), )) => 1;
  set:(ee, array:10) => [10];
  ! fn_ee:(n) [1] = mul:(n, 10) => fn_ee:;
  a_init_all:(ee, fn_ee:) => ();
  check_array:(ee, fn_ee:) => ();
  a_save:ee => (0, 10, 20, 30, 40, 50, 60, 70, 80, 90);
  ! check_copy:(array) [2] = {
    f_put:((), "Checking: ");
    x_trace:(2, array);
    f_put:((), "\n");
    set:(array1, a_copy:array);
    unless:(eq:(a_rank:array, a_rank:array1), f_put:((), "Copy error: rank!\n"));
    unless:(ident:(a_dims:array, a_dims:array1), f_put:((), "Copy error: dimensions!\n"));
    unless:(ident:(a_save:array, a_save:array1), f_put:((), "Copy error: contents!\n"));
    unless:(ident:(array, array1), f_put:((), "Copy error: identity!\n"));
    } => check_copy:;
Checking: [10]
  check_copy:ee => ();
Checking: [5 4 3]
  check_copy:dd => ();
Checking: [3 4 5]
  check_copy:cc => ();
Checking: [4 3 2]
  check_copy:bb => ();
Checking: [3 5]
  check_copy:aa => ();
  ! a_show:(@array) [1] = {
    f_put:((), "\n- ");
    x_trace:(2, array);
    x_trace:(add:(2, 64), reval:array);
    f_put:((), ".\n\n");
    } => a_show:;

- aa[3 5] = [[0, 1, 2, 3, 4], [10, 11, 12, 13, 14], [20, 21, 22, 23, 24]].

  a_show:aa => ();

- bb[4 3 2] = [[[0, 1], [10, 11], [20, 21]], [[100, 101], [110, 111], [120, 121]], [[200, 201], [210, 211], [220, 221]], [[300, 301], [310, 311], [320, 321]]].

  a_show:bb => ();

- cc[3 4 5] = [[["{0:0:0}", "{0:0:1}", "{0:0:2}", "{0:0:3}", "{0:0:4}"], ["{0:1:0}", "{0:1:1}", "{0:1:2}", "{0:1:3}", "{0:1:4}"], ["{0:2:0}", "{0:2:1}", "{0:2:2}", "{0:2:3}", "{0:2:4}"], ["{0:3:0}", "{0:3:1}", "{0:3:2}", "{0:3:3}", "{0:3:4}"]], [["{1:0:0}", "{1:0:1}", "{1:0:2}", "{1:0:3}", "{1:0:4}"], ["{1:1:0}", "{1:1:1}", "{1:1:2}", "{1:1:3}", "{1:1:4}"], ["{1:2:0}", "{1:2:1}", "{1:2:2}", "{1:2:3}", "{1:2:4}"], ["{1:3:0}", "{1:3:1}", "{1:3:2}", "{1:3:3}", "{1:3:4}"]], [["{2:0:0}", "{2:0:1}", "{2:0:2}", "{2:0:3}", "{2:0:4}"], ["{2:1:0}", "{2:1:1}", "{2:1:2}", "{2:1:3}", "{2:1:4}"], ["{2:2:0}", "{2:2:1}", "{2:2:2}", "{2:2:3}", "{2:2:4}"], ["{2:3:0}", "{2:3:1}", "{2:3:2}", "{2:3:3}", "{2:3:4}"]]].

  a_show:cc => ();

- dd[5 4 3] = [[[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11]], [[12, 13, 14], [15, 16, 17], [18, 19, 20], [21, 22, 23]], [[24, 25, 26], [27, 28, 29], [30, 31, 32], [33, 34, 35]], [[36, 37, 38], [39, 40, 41], [42, 43, 44], [45, 46, 47]], [[48, 49, 50], [51, 52, 53], [54, 55, 56], [57, 58, 59]]].

  a_show:dd => ();

- ee[10] = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90].

  a_show:ee => ();

} <Array.awl> #120 / [39]
