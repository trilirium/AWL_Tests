
`
	+---+---+---+---+---+---+
	|	'FlagCode.awl':
	|	International flag alphabet.
	|
	|	AWL Winter libraries/tests.
	|	Written by trilirium
	|	Public domain.
	+---+---+---+---+---+---+
`

include "winter.awl";

!! FlagDrawer (Width Height XMax YMax) {

	! mapPoint (xP yP) = ((xP / XMax) * Width, (yP / YMax) * Height),

	! mapXrange (Xrange) =
		#Xrange > 1 ?
			(((Xrange[0]) / XMax) * Width, ((1 + Xrange[1]) / XMax) * Width)
		  :
			((Xrange / XMax) * Width, ((Xrange + 1) / XMax) * Width),

	! mapYrange (Yrange) =
		#Yrange > 1 ?
			(((Yrange[0]) / YMax) * Height, ((1 + Yrange[1]) / YMax) * Height)
		  :
			((Yrange / YMax) * Height, ((Yrange + 1) / YMax) * Height),

	! Fill (Color) = graphics!!plot_color (Color):: fill_color (Color):: rect ([0 0], [Width Height]),

	! HStrip (Color Yrange) : [y0 y1] = {
		[y0 y1] = mapYrange (Yrange);
		graphics!!plot_color (Color):: fill_color (Color):: rect ([0 y0], [Width y1]);
		},

	! VStrip (Color Xrange) : [x0 x1] = {
		[x0 x1] = mapXrange (Xrange);
		graphics!!plot_color (Color):: fill_color (Color):: rect ([x0 0], [x1 Height]);
		},

	! Rect (Color Xrange Yrange) : [x0 y0 x1 y1] = {
		[x0 x1] = mapXrange (Xrange);
		[y0 y1] = mapYrange (Yrange);
		graphics!!plot_color (Color):: fill_color (Color):: rect ([x0 y0], [x1 y1]);
		},

	! Oval (Color Xrange Yrange) : [x0 y0 x1 y1] = {
		[x0 x1] = mapXrange (Xrange);
		[y0 y1] = mapYrange (Yrange);
		graphics!!plot_color (Color):: fill_color (Color):: oval ([x0 y0], [x1 y1]);
		},

	! Poly (Color points) : [Points] = {
		Points = l_map (!mapPoint, points);
		graphics!!plot_color (Color):: fill_color (Color):: polygon (Points)
		},
	};


FlagData := FlagDrawer!! (

	'Alpha'::
		[4 4]:: {
			VStrip (White(), 0..1);
			Poly (Blue(), [2 0], [2 4], [4 4], [3 2], [4 0], );
			},

	'Bravo'::
		[4 4]::
			Poly (Red(), [0 0], [0 4], [4 4], [3 2], [4 0], ),

	'Charlie'::
		[1 5]::	{
			HStrip (Blue(), 0);
			  HStrip (White(), 1);
			    HStrip (Red(), 2);
			  HStrip (White(), 3);
			HStrip (Blue(), 4);
			},

	'Delta'::
		[1 4]:: {
			HStrip (Yellow(), 0);
			  HStrip (Blue(), 1..2);
			HStrip (Yellow(), 3);
			},

	'Echo'::
		[1 2]:: {
			HStrip (Blue(), 0);
			HStrip (Red(), 1);
			},

	'Foxtrot'::
		[2 2]:: {
			Fill (White());
			Poly (Red(), [1 0], [2 1], [1 2], [0 1], );
			},

	'Golf'::
		[6 1]:: {
			VStrip (Yellow(), 0);
				VStrip (Blue(), 1);
			VStrip (Yellow(), 2);
				VStrip (Blue(), 3);
			VStrip (Yellow(), 4);
				VStrip (Blue(), 5);
			},

	'Hotel'::
		[2 1]:: {
			VStrip (White(), 0);
			VStrip (Red(), 1);
			},

	'India'::
		[4 4]:: {
			Fill (Yellow ());
			Oval (Black (), 1..2, 1..2);
			},

	'Juliet'::
		[1 3]:: {
			HStrip (Blue(), 0);
				HStrip (White(), 1);
			HStrip (Blue(), 2);
			},

	'Kilo'::
		[2 1]:: {
			VStrip (Yellow(), 0);
			VStrip (Blue(), 1);
			},

	'Lima'::
		[2 2]:: {
			Rect (Yellow(), 0, 0);
			Rect (Black(), 0, 1);
			Rect (Yellow(), 1, 1);
			Rect (Black(), 1, 0);
			},

	'Mike'::
		[8 8]:: {
			Fill (Blue());
			Poly (White(), [0 0], [0 1], [7 8], [8 8], [8 7], [1 0], );
			Poly (White(), [0 8], [1 8], [8 1], [8 0], [7 0], [0 7], );
			},

	'November'::
		[4 4]::
			((! : [x y] = (
			for_inc (x, 4,
				for_inc (y, 4,
					Rect ((x ~ y) & 1 ? White() : Blue(), x, y)
					)
				)
				)) ! ()),

	'Oscar'::
		[1 1]:: {
			Poly (Red(), [0 0], [1 0], [1 1], );
			Poly (Yellow(), [0 0], [0 1], [1 1], );
			},

	'Papa'::
		[3 3]:: {
			Fill (Blue());
			Rect (White(), 1, 1);
			},

	'Quebec'::
		[1 1]::
			Fill (Yellow()),
	
	'Romeo'::
		[5 5]:: {
			Fill (Red());
			HStrip (Yellow(), 2);
			VStrip (Yellow(), 2);
			},

	'Sierra'::
		[3 3]:: {
			Fill (White());
			Rect (Blue(), 1, 1);
			},

	'Tango'::
		[3 1]:: {
			VStrip (Red(), 0);
			VStrip (White(), 1);
			VStrip (Blue(), 2);
			},

	'Uniform'::
		[2 2]:: {
			Rect (Red(), 0, 0);
			Rect (White(), 0, 1);
			Rect (Red(), 1, 1);
			Rect (White(), 1, 0);
			},

	'Victor'::
		[8 8]:: {
			Fill (White());
			Poly (Red(), [0 0], [0 1], [7 8], [8 8], [8 7], [1 0], );
			Poly (Red(), [0 8], [1 8], [8 1], [8 0], [7 0], [0 7], );
			},

	'Whiskey'::
		[5 5]:: {
			Fill (Blue());
			Rect (White(), 1..3, 1..3);
			Rect (Red(), 2, 2);
			},

	'X-ray'::
		[5 5]:: {
			Fill (White());
			HStrip (Blue(), 2);
			VStrip (Blue(), 2);
			},

	'Yankee'::
		[5 5]:: {
			Poly (Yellow(), [0 0], [0 1], [1 0], );
			Poly (Red(), [0 1], [0 2], [2 0], [1 0], );
			Poly (Yellow(), [0 2], [0 3], [3 0], [2 0], );
			Poly (Red(), [0 3], [0 4], [4 0], [3 0], );
			Poly (Yellow(), [0 4], [0 5], [5 0], [4 0], );

			Poly (Red(), [0 5], [1 5], [5 1], [5 0], );
			Poly (Yellow(), [1 5], [2 5], [5 2], [5 1], );
			Poly (Red(), [2 5], [3 5], [5 3], [5 2], );
			Poly (Yellow(), [3 5], [4 5], [5 4], [5 3], );
			Poly (Red(), [4 5], [5 5], [5 4], );
			},

	'Zulu'::
		[2 2]:: {
			Poly (Black(), [0 0], [1 1], [0 2], );
			Poly (Yellow(), [0 0], [1 1], [2 0], );
			Poly (Blue(), [2 0], [1 1], [2 2], );
			Poly (Red(), [2 2], [1 1], [0 2], );
			},
	);

!! [Widget] FlagView (Background Flags LabelH LabelW) : [index placement] {

	! #on_open = { index = 0; placement = 9; },

	! text_box_align (flags @what) =
		graphics!! switch (placement):: (
			7::	text_box (flags, [0 0], [LabelW LabelH], ^what),
			8::	text_box (flags, ((Width - LabelW) << 1, 0), [LabelW LabelH], ^what),
			9::	text_box (flags, (Width - LabelW, 0), [LabelW LabelH], ^what),

			4::	text_box (flags, [0 0], [LabelW LabelH], ^what),
			5::	text_box (flags, ((Width - LabelW) >> 1, 0), [LabelW LabelH], ^what),
			6::	text_box (flags, (Width - LabelW, 0), [LabelW LabelH], ^what),

			1::	text_box (flags, (0, Height - LabelH), [LabelW LabelH], ^what),
			2::	text_box (flags, ((Width - LabelW) << 1, Height - LabelH), [LabelW LabelH], ^what),
			3::	text_box (flags, (Width - LabelW, Height - LabelH), [LabelW LabelH], ^what),
			),

	! #on_paint (L_T R_B) : [flag fd] =
		{
		` (clear widget area) `
		graphics!!fill_color (Background):: fill (L_T, R_B);

		flag = FlagData [index];
		
		<: ("\t", flag[0], "\n");
		FlagDrawer (Width, Height, flag[1]).(^flag[2]);

		graphics!!font_bgcolor (Grey (\x30))::
			font_fgcolor (Yellow (\xB0)):: text_box_align (3 << 4 | 3, text (flag[0]));
		},

	! #on_resize () = with_widget^ on_paint ([0 0], [Width Height]),

	! move_rel (shift) = {
		shift < 0 ?		-- index :
		shift > 0 ?		++ index :
		;

		with_widget^ on_paint ([0 0], [Width Height]);
		},

	! #on_key (action key) =
		if (action > 0):: {

			switch (key):: (
				KB_Left::		move_rel (-1),
				KB_Up::			move_rel (-1),

				KB_Right::		move_rel (1),
				KB_Down::		move_rel (1),
				
				` default... `
				if (inside (key, \c'0' .. 1 + \c'9')):: {
					placement = key - \c'0';
					on_resize ();
					}
				)
			},

	! #on_close = {},

	};		` -- FlagView `

WinSession (

	(FlagView ("Flags viewer", White(\x70), 0, 24, 56), [0 0], [300 300]),

	);

